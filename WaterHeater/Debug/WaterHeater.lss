
WaterHeater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000014b0  00001544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000030  00800072  00800072  00001556  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003508  00000000  00000000  000019a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013b2  00000000  00000000  00004eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c81  00000000  00000000  0000625e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008b0  00000000  00000000  00007ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001624  00000000  00000000  00008790  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a0e  00000000  00000000  00009db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000310  00000000  00000000  0000b7c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__vector_6>
      1c:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__vector_7>
      20:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_8>
      24:	0c 94 73 08 	jmp	0x10e6	; 0x10e6 <__vector_9>
      28:	0c 94 4a 07 	jmp	0xe94	; 0xe94 <__vector_10>
      2c:	0c 94 18 07 	jmp	0xe30	; 0xe30 <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 c9 03 	jmp	0x792	; 0x792 <__vector_19>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	71 00       	.word	0x0071	; ????
      56:	75 00       	.word	0x0075	; ????
      58:	79 00       	.word	0x0079	; ????
      5a:	7d 00       	.word	0x007d	; ????
      5c:	81 00       	.word	0x0081	; ????
      5e:	85 00       	.word	0x0085	; ????
      60:	89 00       	.word	0x0089	; ????
      62:	11 08       	sbc	r1, r1
      64:	1b 08       	sbc	r1, r11
      66:	25 08       	sbc	r2, r5
      68:	2f 08       	sbc	r2, r15
      6a:	39 08       	sbc	r3, r9
      6c:	43 08       	sbc	r4, r3
      6e:	4d 08       	sbc	r4, r13
      70:	57 08       	sbc	r5, r7

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e0 eb       	ldi	r30, 0xB0	; 176
      86:	f4 e1       	ldi	r31, 0x14	; 20
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a2 37       	cpi	r26, 0x72	; 114
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	a2 e7       	ldi	r26, 0x72	; 114
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a2 3a       	cpi	r26, 0xA2	; 162
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 ae 04 	call	0x95c	; 0x95c <main>
      a8:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <ADC_Init>:
Bool_t ADC_ASY_Read(ChanneL_Select channel,uint16 *ptr)
{
 	Bool_t ret=FALSE;
	
   return ret; 
}
      b0:	81 30       	cpi	r24, 0x01	; 1
      b2:	39 f0       	breq	.+14     	; 0xc2 <ADC_Init+0x12>
      b4:	18 f0       	brcs	.+6      	; 0xbc <ADC_Init+0xc>
      b6:	83 30       	cpi	r24, 0x03	; 3
      b8:	39 f0       	breq	.+14     	; 0xc8 <ADC_Init+0x18>
      ba:	08 c0       	rjmp	.+16     	; 0xcc <ADC_Init+0x1c>
      bc:	3e 98       	cbi	0x07, 6	; 7
      be:	3e 98       	cbi	0x07, 6	; 7
      c0:	05 c0       	rjmp	.+10     	; 0xcc <ADC_Init+0x1c>
      c2:	3e 9a       	sbi	0x07, 6	; 7
      c4:	3f 98       	cbi	0x07, 7	; 7
      c6:	02 c0       	rjmp	.+4      	; 0xcc <ADC_Init+0x1c>
      c8:	3f 9a       	sbi	0x07, 7	; 7
      ca:	3f 9a       	sbi	0x07, 7	; 7
      cc:	86 2f       	mov	r24, r22
      ce:	90 e0       	ldi	r25, 0x00	; 0
      d0:	fc 01       	movw	r30, r24
      d2:	31 97       	sbiw	r30, 0x01	; 1
      d4:	e7 30       	cpi	r30, 0x07	; 7
      d6:	f1 05       	cpc	r31, r1
      d8:	f8 f4       	brcc	.+62     	; 0x118 <ADC_Init+0x68>
      da:	e6 5d       	subi	r30, 0xD6	; 214
      dc:	ff 4f       	sbci	r31, 0xFF	; 255
      de:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__tablejump2__>
      e2:	30 9a       	sbi	0x06, 0	; 6
      e4:	31 98       	cbi	0x06, 1	; 6
      e6:	32 98       	cbi	0x06, 2	; 6
      e8:	17 c0       	rjmp	.+46     	; 0x118 <ADC_Init+0x68>
      ea:	30 98       	cbi	0x06, 0	; 6
      ec:	31 9a       	sbi	0x06, 1	; 6
      ee:	32 98       	cbi	0x06, 2	; 6
      f0:	13 c0       	rjmp	.+38     	; 0x118 <ADC_Init+0x68>
      f2:	30 9a       	sbi	0x06, 0	; 6
      f4:	31 9a       	sbi	0x06, 1	; 6
      f6:	32 98       	cbi	0x06, 2	; 6
      f8:	0f c0       	rjmp	.+30     	; 0x118 <ADC_Init+0x68>
      fa:	30 98       	cbi	0x06, 0	; 6
      fc:	31 98       	cbi	0x06, 1	; 6
      fe:	32 9a       	sbi	0x06, 2	; 6
     100:	0b c0       	rjmp	.+22     	; 0x118 <ADC_Init+0x68>
     102:	30 9a       	sbi	0x06, 0	; 6
     104:	31 98       	cbi	0x06, 1	; 6
     106:	32 9a       	sbi	0x06, 2	; 6
     108:	07 c0       	rjmp	.+14     	; 0x118 <ADC_Init+0x68>
     10a:	30 98       	cbi	0x06, 0	; 6
     10c:	31 9a       	sbi	0x06, 1	; 6
     10e:	32 9a       	sbi	0x06, 2	; 6
     110:	03 c0       	rjmp	.+6      	; 0x118 <ADC_Init+0x68>
     112:	30 9a       	sbi	0x06, 0	; 6
     114:	31 9a       	sbi	0x06, 1	; 6
     116:	32 9a       	sbi	0x06, 2	; 6
     118:	3d 98       	cbi	0x07, 5	; 7
     11a:	37 9a       	sbi	0x06, 7	; 6
     11c:	08 95       	ret

0000011e <ADC_Converstion>:
     11e:	26 b1       	in	r18, 0x06	; 6
     120:	2f 7b       	andi	r18, 0xBF	; 191
     122:	30 e4       	ldi	r19, 0x40	; 64
     124:	83 9f       	mul	r24, r19
     126:	c0 01       	movw	r24, r0
     128:	11 24       	eor	r1, r1
     12a:	82 2b       	or	r24, r18
     12c:	86 b9       	out	0x06, r24	; 6
     12e:	08 95       	ret

00000130 <Get_ADC_NO_BLOCK>:
*/
uint16 Get_ADC_NO_BLOCK(ChanneL_Select channel)
{
		uint16 ret=0;
		
		ADC_ADUMX &=~(0x1f);              // Clear all channels
     130:	97 b1       	in	r25, 0x07	; 7
     132:	90 7e       	andi	r25, 0xE0	; 224
     134:	97 b9       	out	0x07, r25	; 7
		
		ADC_ADUMX|=(channel<<MUX0);
     136:	97 b1       	in	r25, 0x07	; 7
     138:	89 2b       	or	r24, r25
     13a:	87 b9       	out	0x07, r24	; 7
			
		ret=ADC;
     13c:	84 b1       	in	r24, 0x04	; 4
     13e:	95 b1       	in	r25, 0x05	; 5
		
		return ret;
     140:	08 95       	ret

00000142 <Pin_Init>:
		break;
		case (PC):
		PUT_VALUE_8bit(DDRC,value);
		break;		
		case (PD):
		PUT_VALUE_8bit(DDRD,value);
     142:	98 2f       	mov	r25, r24
     144:	96 95       	lsr	r25
     146:	96 95       	lsr	r25
     148:	96 95       	lsr	r25
     14a:	87 70       	andi	r24, 0x07	; 7
     14c:	61 30       	cpi	r22, 0x01	; 1
     14e:	09 f4       	brne	.+2      	; 0x152 <Pin_Init+0x10>
     150:	90 c0       	rjmp	.+288    	; 0x272 <Pin_Init+0x130>
     152:	18 f0       	brcs	.+6      	; 0x15a <Pin_Init+0x18>
     154:	62 30       	cpi	r22, 0x02	; 2
     156:	e9 f1       	breq	.+122    	; 0x1d2 <Pin_Init+0x90>
     158:	08 95       	ret
     15a:	91 30       	cpi	r25, 0x01	; 1
     15c:	99 f0       	breq	.+38     	; 0x184 <Pin_Init+0x42>
     15e:	28 f0       	brcs	.+10     	; 0x16a <Pin_Init+0x28>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	51 f1       	breq	.+84     	; 0x1b8 <Pin_Init+0x76>
     164:	93 30       	cpi	r25, 0x03	; 3
     166:	d9 f0       	breq	.+54     	; 0x19e <Pin_Init+0x5c>
     168:	08 95       	ret
     16a:	4a b3       	in	r20, 0x1a	; 26
     16c:	21 e0       	ldi	r18, 0x01	; 1
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	b9 01       	movw	r22, r18
     172:	02 c0       	rjmp	.+4      	; 0x178 <Pin_Init+0x36>
     174:	66 0f       	add	r22, r22
     176:	77 1f       	adc	r23, r23
     178:	8a 95       	dec	r24
     17a:	e2 f7       	brpl	.-8      	; 0x174 <Pin_Init+0x32>
     17c:	cb 01       	movw	r24, r22
     17e:	84 2b       	or	r24, r20
     180:	8a bb       	out	0x1a, r24	; 26
     182:	08 95       	ret
     184:	47 b3       	in	r20, 0x17	; 23
     186:	21 e0       	ldi	r18, 0x01	; 1
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	b9 01       	movw	r22, r18
     18c:	02 c0       	rjmp	.+4      	; 0x192 <Pin_Init+0x50>
     18e:	66 0f       	add	r22, r22
     190:	77 1f       	adc	r23, r23
     192:	8a 95       	dec	r24
     194:	e2 f7       	brpl	.-8      	; 0x18e <Pin_Init+0x4c>
     196:	cb 01       	movw	r24, r22
     198:	84 2b       	or	r24, r20
     19a:	87 bb       	out	0x17, r24	; 23
     19c:	08 95       	ret
     19e:	41 b3       	in	r20, 0x11	; 17
     1a0:	21 e0       	ldi	r18, 0x01	; 1
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	b9 01       	movw	r22, r18
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <Pin_Init+0x6a>
     1a8:	66 0f       	add	r22, r22
     1aa:	77 1f       	adc	r23, r23
     1ac:	8a 95       	dec	r24
     1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <Pin_Init+0x66>
     1b0:	cb 01       	movw	r24, r22
     1b2:	84 2b       	or	r24, r20
     1b4:	81 bb       	out	0x11, r24	; 17
     1b6:	08 95       	ret
     1b8:	44 b3       	in	r20, 0x14	; 20
     1ba:	21 e0       	ldi	r18, 0x01	; 1
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	b9 01       	movw	r22, r18
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <Pin_Init+0x84>
     1c2:	66 0f       	add	r22, r22
     1c4:	77 1f       	adc	r23, r23
     1c6:	8a 95       	dec	r24
     1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <Pin_Init+0x80>
     1ca:	cb 01       	movw	r24, r22
     1cc:	84 2b       	or	r24, r20
     1ce:	84 bb       	out	0x14, r24	; 20
     1d0:	08 95       	ret
     1d2:	91 30       	cpi	r25, 0x01	; 1
     1d4:	c1 f0       	breq	.+48     	; 0x206 <Pin_Init+0xc4>
     1d6:	28 f0       	brcs	.+10     	; 0x1e2 <Pin_Init+0xa0>
     1d8:	92 30       	cpi	r25, 0x02	; 2
     1da:	c9 f1       	breq	.+114    	; 0x24e <Pin_Init+0x10c>
     1dc:	93 30       	cpi	r25, 0x03	; 3
     1de:	29 f1       	breq	.+74     	; 0x22a <Pin_Init+0xe8>
     1e0:	08 95       	ret
     1e2:	4a b3       	in	r20, 0x1a	; 26
     1e4:	21 e0       	ldi	r18, 0x01	; 1
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	b9 01       	movw	r22, r18
     1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <Pin_Init+0xae>
     1ec:	66 0f       	add	r22, r22
     1ee:	77 1f       	adc	r23, r23
     1f0:	8a 95       	dec	r24
     1f2:	e2 f7       	brpl	.-8      	; 0x1ec <Pin_Init+0xaa>
     1f4:	cb 01       	movw	r24, r22
     1f6:	96 2f       	mov	r25, r22
     1f8:	90 95       	com	r25
     1fa:	94 23       	and	r25, r20
     1fc:	9a bb       	out	0x1a, r25	; 26
     1fe:	9b b3       	in	r25, 0x1b	; 27
     200:	89 2b       	or	r24, r25
     202:	8b bb       	out	0x1b, r24	; 27
     204:	08 95       	ret
     206:	47 b3       	in	r20, 0x17	; 23
     208:	21 e0       	ldi	r18, 0x01	; 1
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	b9 01       	movw	r22, r18
     20e:	02 c0       	rjmp	.+4      	; 0x214 <Pin_Init+0xd2>
     210:	66 0f       	add	r22, r22
     212:	77 1f       	adc	r23, r23
     214:	8a 95       	dec	r24
     216:	e2 f7       	brpl	.-8      	; 0x210 <Pin_Init+0xce>
     218:	cb 01       	movw	r24, r22
     21a:	96 2f       	mov	r25, r22
     21c:	90 95       	com	r25
     21e:	94 23       	and	r25, r20
     220:	97 bb       	out	0x17, r25	; 23
     222:	98 b3       	in	r25, 0x18	; 24
     224:	89 2b       	or	r24, r25
     226:	88 bb       	out	0x18, r24	; 24
     228:	08 95       	ret
     22a:	41 b3       	in	r20, 0x11	; 17
     22c:	21 e0       	ldi	r18, 0x01	; 1
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	b9 01       	movw	r22, r18
     232:	02 c0       	rjmp	.+4      	; 0x238 <Pin_Init+0xf6>
     234:	66 0f       	add	r22, r22
     236:	77 1f       	adc	r23, r23
     238:	8a 95       	dec	r24
     23a:	e2 f7       	brpl	.-8      	; 0x234 <Pin_Init+0xf2>
     23c:	cb 01       	movw	r24, r22
     23e:	96 2f       	mov	r25, r22
     240:	90 95       	com	r25
     242:	94 23       	and	r25, r20
     244:	91 bb       	out	0x11, r25	; 17
     246:	92 b3       	in	r25, 0x12	; 18
     248:	89 2b       	or	r24, r25
     24a:	82 bb       	out	0x12, r24	; 18
     24c:	08 95       	ret
     24e:	44 b3       	in	r20, 0x14	; 20
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	b9 01       	movw	r22, r18
     256:	02 c0       	rjmp	.+4      	; 0x25c <Pin_Init+0x11a>
     258:	66 0f       	add	r22, r22
     25a:	77 1f       	adc	r23, r23
     25c:	8a 95       	dec	r24
     25e:	e2 f7       	brpl	.-8      	; 0x258 <Pin_Init+0x116>
     260:	cb 01       	movw	r24, r22
     262:	96 2f       	mov	r25, r22
     264:	90 95       	com	r25
     266:	94 23       	and	r25, r20
     268:	94 bb       	out	0x14, r25	; 20
     26a:	95 b3       	in	r25, 0x15	; 21
     26c:	89 2b       	or	r24, r25
     26e:	85 bb       	out	0x15, r24	; 21
     270:	08 95       	ret
     272:	91 30       	cpi	r25, 0x01	; 1
     274:	c1 f0       	breq	.+48     	; 0x2a6 <Pin_Init+0x164>
     276:	28 f0       	brcs	.+10     	; 0x282 <Pin_Init+0x140>
     278:	92 30       	cpi	r25, 0x02	; 2
     27a:	c9 f1       	breq	.+114    	; 0x2ee <Pin_Init+0x1ac>
     27c:	93 30       	cpi	r25, 0x03	; 3
     27e:	29 f1       	breq	.+74     	; 0x2ca <Pin_Init+0x188>
     280:	08 95       	ret
     282:	4a b3       	in	r20, 0x1a	; 26
     284:	21 e0       	ldi	r18, 0x01	; 1
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	b9 01       	movw	r22, r18
     28a:	02 c0       	rjmp	.+4      	; 0x290 <Pin_Init+0x14e>
     28c:	66 0f       	add	r22, r22
     28e:	77 1f       	adc	r23, r23
     290:	8a 95       	dec	r24
     292:	e2 f7       	brpl	.-8      	; 0x28c <Pin_Init+0x14a>
     294:	cb 01       	movw	r24, r22
     296:	80 95       	com	r24
     298:	94 2f       	mov	r25, r20
     29a:	98 23       	and	r25, r24
     29c:	9a bb       	out	0x1a, r25	; 26
     29e:	9b b3       	in	r25, 0x1b	; 27
     2a0:	89 23       	and	r24, r25
     2a2:	8b bb       	out	0x1b, r24	; 27
     2a4:	08 95       	ret
     2a6:	47 b3       	in	r20, 0x17	; 23
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	b9 01       	movw	r22, r18
     2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <Pin_Init+0x172>
     2b0:	66 0f       	add	r22, r22
     2b2:	77 1f       	adc	r23, r23
     2b4:	8a 95       	dec	r24
     2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <Pin_Init+0x16e>
     2b8:	cb 01       	movw	r24, r22
     2ba:	80 95       	com	r24
     2bc:	94 2f       	mov	r25, r20
     2be:	98 23       	and	r25, r24
     2c0:	97 bb       	out	0x17, r25	; 23
     2c2:	98 b3       	in	r25, 0x18	; 24
     2c4:	89 23       	and	r24, r25
     2c6:	88 bb       	out	0x18, r24	; 24
     2c8:	08 95       	ret
     2ca:	41 b3       	in	r20, 0x11	; 17
     2cc:	21 e0       	ldi	r18, 0x01	; 1
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	b9 01       	movw	r22, r18
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <Pin_Init+0x196>
     2d4:	66 0f       	add	r22, r22
     2d6:	77 1f       	adc	r23, r23
     2d8:	8a 95       	dec	r24
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <Pin_Init+0x192>
     2dc:	cb 01       	movw	r24, r22
     2de:	80 95       	com	r24
     2e0:	94 2f       	mov	r25, r20
     2e2:	98 23       	and	r25, r24
     2e4:	91 bb       	out	0x11, r25	; 17
     2e6:	92 b3       	in	r25, 0x12	; 18
     2e8:	89 23       	and	r24, r25
     2ea:	82 bb       	out	0x12, r24	; 18
     2ec:	08 95       	ret
     2ee:	44 b3       	in	r20, 0x14	; 20
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	b9 01       	movw	r22, r18
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <Pin_Init+0x1ba>
     2f8:	66 0f       	add	r22, r22
     2fa:	77 1f       	adc	r23, r23
     2fc:	8a 95       	dec	r24
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <Pin_Init+0x1b6>
     300:	cb 01       	movw	r24, r22
     302:	80 95       	com	r24
     304:	94 2f       	mov	r25, r20
     306:	98 23       	and	r25, r24
     308:	94 bb       	out	0x14, r25	; 20
     30a:	95 b3       	in	r25, 0x15	; 21
     30c:	89 23       	and	r24, r25
     30e:	85 bb       	out	0x15, r24	; 21
     310:	08 95       	ret

00000312 <Set_Pin>:
     312:	98 2f       	mov	r25, r24
     314:	97 70       	andi	r25, 0x07	; 7
     316:	86 95       	lsr	r24
     318:	86 95       	lsr	r24
     31a:	86 95       	lsr	r24
     31c:	81 30       	cpi	r24, 0x01	; 1
     31e:	c9 f0       	breq	.+50     	; 0x352 <Set_Pin+0x40>
     320:	28 f0       	brcs	.+10     	; 0x32c <Set_Pin+0x1a>
     322:	82 30       	cpi	r24, 0x02	; 2
     324:	e1 f1       	breq	.+120    	; 0x39e <Set_Pin+0x8c>
     326:	83 30       	cpi	r24, 0x03	; 3
     328:	39 f1       	breq	.+78     	; 0x378 <Set_Pin+0x66>
     32a:	08 95       	ret
     32c:	2b b3       	in	r18, 0x1b	; 27
     32e:	41 e0       	ldi	r20, 0x01	; 1
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	09 2e       	mov	r0, r25
     334:	02 c0       	rjmp	.+4      	; 0x33a <Set_Pin+0x28>
     336:	44 0f       	add	r20, r20
     338:	55 1f       	adc	r21, r21
     33a:	0a 94       	dec	r0
     33c:	e2 f7       	brpl	.-8      	; 0x336 <Set_Pin+0x24>
     33e:	84 2f       	mov	r24, r20
     340:	80 95       	com	r24
     342:	82 23       	and	r24, r18
     344:	01 c0       	rjmp	.+2      	; 0x348 <Set_Pin+0x36>
     346:	66 0f       	add	r22, r22
     348:	9a 95       	dec	r25
     34a:	ea f7       	brpl	.-6      	; 0x346 <Set_Pin+0x34>
     34c:	68 2b       	or	r22, r24
     34e:	6b bb       	out	0x1b, r22	; 27
     350:	08 95       	ret
     352:	28 b3       	in	r18, 0x18	; 24
     354:	41 e0       	ldi	r20, 0x01	; 1
     356:	50 e0       	ldi	r21, 0x00	; 0
     358:	09 2e       	mov	r0, r25
     35a:	02 c0       	rjmp	.+4      	; 0x360 <Set_Pin+0x4e>
     35c:	44 0f       	add	r20, r20
     35e:	55 1f       	adc	r21, r21
     360:	0a 94       	dec	r0
     362:	e2 f7       	brpl	.-8      	; 0x35c <Set_Pin+0x4a>
     364:	84 2f       	mov	r24, r20
     366:	80 95       	com	r24
     368:	82 23       	and	r24, r18
     36a:	01 c0       	rjmp	.+2      	; 0x36e <Set_Pin+0x5c>
     36c:	66 0f       	add	r22, r22
     36e:	9a 95       	dec	r25
     370:	ea f7       	brpl	.-6      	; 0x36c <Set_Pin+0x5a>
     372:	68 2b       	or	r22, r24
     374:	68 bb       	out	0x18, r22	; 24
     376:	08 95       	ret
     378:	22 b3       	in	r18, 0x12	; 18
     37a:	41 e0       	ldi	r20, 0x01	; 1
     37c:	50 e0       	ldi	r21, 0x00	; 0
     37e:	09 2e       	mov	r0, r25
     380:	02 c0       	rjmp	.+4      	; 0x386 <Set_Pin+0x74>
     382:	44 0f       	add	r20, r20
     384:	55 1f       	adc	r21, r21
     386:	0a 94       	dec	r0
     388:	e2 f7       	brpl	.-8      	; 0x382 <Set_Pin+0x70>
     38a:	84 2f       	mov	r24, r20
     38c:	80 95       	com	r24
     38e:	82 23       	and	r24, r18
     390:	01 c0       	rjmp	.+2      	; 0x394 <Set_Pin+0x82>
     392:	66 0f       	add	r22, r22
     394:	9a 95       	dec	r25
     396:	ea f7       	brpl	.-6      	; 0x392 <Set_Pin+0x80>
     398:	68 2b       	or	r22, r24
     39a:	62 bb       	out	0x12, r22	; 18
     39c:	08 95       	ret
     39e:	25 b3       	in	r18, 0x15	; 21
     3a0:	41 e0       	ldi	r20, 0x01	; 1
     3a2:	50 e0       	ldi	r21, 0x00	; 0
     3a4:	09 2e       	mov	r0, r25
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <Set_Pin+0x9a>
     3a8:	44 0f       	add	r20, r20
     3aa:	55 1f       	adc	r21, r21
     3ac:	0a 94       	dec	r0
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <Set_Pin+0x96>
     3b0:	84 2f       	mov	r24, r20
     3b2:	80 95       	com	r24
     3b4:	82 23       	and	r24, r18
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <Set_Pin+0xa8>
     3b8:	66 0f       	add	r22, r22
     3ba:	9a 95       	dec	r25
     3bc:	ea f7       	brpl	.-6      	; 0x3b8 <Set_Pin+0xa6>
     3be:	68 2b       	or	r22, r24
     3c0:	65 bb       	out	0x15, r22	; 21
     3c2:	08 95       	ret

000003c4 <Toggle_Pin>:
     3c4:	98 2f       	mov	r25, r24
     3c6:	97 70       	andi	r25, 0x07	; 7
     3c8:	86 95       	lsr	r24
     3ca:	86 95       	lsr	r24
     3cc:	86 95       	lsr	r24
     3ce:	81 30       	cpi	r24, 0x01	; 1
     3d0:	99 f0       	breq	.+38     	; 0x3f8 <Toggle_Pin+0x34>
     3d2:	28 f0       	brcs	.+10     	; 0x3de <Toggle_Pin+0x1a>
     3d4:	82 30       	cpi	r24, 0x02	; 2
     3d6:	51 f1       	breq	.+84     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
     3d8:	83 30       	cpi	r24, 0x03	; 3
     3da:	d9 f0       	breq	.+54     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
     3dc:	08 95       	ret
     3de:	4b b3       	in	r20, 0x1b	; 27
     3e0:	21 e0       	ldi	r18, 0x01	; 1
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	b9 01       	movw	r22, r18
     3e6:	02 c0       	rjmp	.+4      	; 0x3ec <Toggle_Pin+0x28>
     3e8:	66 0f       	add	r22, r22
     3ea:	77 1f       	adc	r23, r23
     3ec:	9a 95       	dec	r25
     3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <Toggle_Pin+0x24>
     3f0:	cb 01       	movw	r24, r22
     3f2:	84 27       	eor	r24, r20
     3f4:	8b bb       	out	0x1b, r24	; 27
     3f6:	08 95       	ret
     3f8:	48 b3       	in	r20, 0x18	; 24
     3fa:	21 e0       	ldi	r18, 0x01	; 1
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	b9 01       	movw	r22, r18
     400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	66 0f       	add	r22, r22
     404:	77 1f       	adc	r23, r23
     406:	9a 95       	dec	r25
     408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     40a:	cb 01       	movw	r24, r22
     40c:	84 27       	eor	r24, r20
     40e:	88 bb       	out	0x18, r24	; 24
     410:	08 95       	ret
     412:	42 b3       	in	r20, 0x12	; 18
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	b9 01       	movw	r22, r18
     41a:	02 c0       	rjmp	.+4      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     41c:	66 0f       	add	r22, r22
     41e:	77 1f       	adc	r23, r23
     420:	9a 95       	dec	r25
     422:	e2 f7       	brpl	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	cb 01       	movw	r24, r22
     426:	84 27       	eor	r24, r20
     428:	82 bb       	out	0x12, r24	; 18
     42a:	08 95       	ret
     42c:	45 b3       	in	r20, 0x15	; 21
     42e:	21 e0       	ldi	r18, 0x01	; 1
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	b9 01       	movw	r22, r18
     434:	02 c0       	rjmp	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     436:	66 0f       	add	r22, r22
     438:	77 1f       	adc	r23, r23
     43a:	9a 95       	dec	r25
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     43e:	cb 01       	movw	r24, r22
     440:	84 27       	eor	r24, r20
     442:	85 bb       	out	0x15, r24	; 21
     444:	08 95       	ret

00000446 <Set_Port>:
	}
	
}
extern void Set_Port(DIO_Port_type port ,uint8 value)
{
		switch(port)
     446:	81 30       	cpi	r24, 0x01	; 1
     448:	41 f0       	breq	.+16     	; 0x45a <Set_Port+0x14>
     44a:	28 f0       	brcs	.+10     	; 0x456 <Set_Port+0x10>
     44c:	82 30       	cpi	r24, 0x02	; 2
     44e:	39 f0       	breq	.+14     	; 0x45e <Set_Port+0x18>
     450:	83 30       	cpi	r24, 0x03	; 3
     452:	39 f0       	breq	.+14     	; 0x462 <Set_Port+0x1c>
     454:	08 95       	ret
		{
			case (PA):
			PUT_VALUE_8bit(PORTA,value);
     456:	6b bb       	out	0x1b, r22	; 27
			break;
     458:	08 95       	ret
			case (PB):
			PUT_VALUE_8bit(PORTB,value);
     45a:	68 bb       	out	0x18, r22	; 24
			break;
     45c:	08 95       	ret
			case (PC):
			PUT_VALUE_8bit(PORTC,value);
     45e:	65 bb       	out	0x15, r22	; 21
			break;
     460:	08 95       	ret
			case (PD):
			PUT_VALUE_8bit(PORTD,value);
     462:	62 bb       	out	0x12, r22	; 18
     464:	08 95       	ret

00000466 <Get_state>:
#define DISP_PERIOD                 (20)
static Bool_t Blink_Flag=FALSE;
Bool_t Get_state()
{
	return Blink_Flag;
}
     466:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <Blink_Flag>
     46a:	08 95       	ret

0000046c <Display_Init>:
void Display_Init()
{

 SSD_Init(SSD_R);
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	0e 94 02 05 	call	0xa04	; 0xa04 <SSD_Init>
 SSD_Init(SSD_M);
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	0e 94 02 05 	call	0xa04	; 0xa04 <SSD_Init>
SSD_Set_symbol(SSD_R,SSD_NULL);
     478:	6a e0       	ldi	r22, 0x0A	; 10
     47a:	80 e0       	ldi	r24, 0x00	; 0
     47c:	0e 94 c9 04 	call	0x992	; 0x992 <SSD_Set_symbol>
SSD_Set_symbol(SSD_M,SSD_NULL);
     480:	6a e0       	ldi	r22, 0x0A	; 10
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	0e 94 c9 04 	call	0x992	; 0x992 <SSD_Set_symbol>
Pin_Init(PIND4,LOW);
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	8c e1       	ldi	r24, 0x1C	; 28
     48c:	0e 94 a1 00 	call	0x142	; 0x142 <Pin_Init>
     490:	08 95       	ret

00000492 <Display_Update>:

}

void Display_Update()
{
     492:	cf 93       	push	r28
	static uint16 Time=0;
	
	Bool_t flag=FALSE;
	

     Disp_Counter+=OS_TICK;
     494:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Disp_Counter.1831>
     498:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (Disp_Counter!=DISP_PERIOD)
     49a:	84 31       	cpi	r24, 0x14	; 20
     49c:	19 f0       	breq	.+6      	; 0x4a4 <Display_Update+0x12>
	static uint16 Time=0;
	
	Bool_t flag=FALSE;
	

     Disp_Counter+=OS_TICK;
     49e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Disp_Counter.1831>
     4a2:	83 c0       	rjmp	.+262    	; 0x5aa <Display_Update+0x118>
	{
		return;
	}
	
	
	Disp_Counter=0;
     4a4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Disp_Counter.1831>
	
	flag=Temp_Setting_Get_Status();
     4a8:	0e 94 12 07 	call	0xe24	; 0xe24 <Temp_Setting_Get_Status>
	


	if (flag==TRUE)
     4ac:	81 30       	cpi	r24, 0x01	; 1
     4ae:	09 f0       	breq	.+2      	; 0x4b2 <Display_Update+0x20>
     4b0:	60 c0       	rjmp	.+192    	; 0x572 <Display_Update+0xe0>
	{
		temp=Temp_Setting_Get_Temp();
     4b2:	0e 94 0f 07 	call	0xe1e	; 0xe1e <Temp_Setting_Get_Temp>
		
		SSD_Set_symbol(SSD_R,temp%10);
     4b6:	cd ec       	ldi	r28, 0xCD	; 205
     4b8:	8c 9f       	mul	r24, r28
     4ba:	c1 2d       	mov	r28, r1
     4bc:	11 24       	eor	r1, r1
     4be:	c6 95       	lsr	r28
     4c0:	c6 95       	lsr	r28
     4c2:	c6 95       	lsr	r28
     4c4:	2c 2f       	mov	r18, r28
     4c6:	22 0f       	add	r18, r18
     4c8:	92 2f       	mov	r25, r18
     4ca:	99 0f       	add	r25, r25
     4cc:	99 0f       	add	r25, r25
     4ce:	92 0f       	add	r25, r18
     4d0:	68 2f       	mov	r22, r24
     4d2:	69 1b       	sub	r22, r25
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	0e 94 c9 04 	call	0x992	; 0x992 <SSD_Set_symbol>
		
		SSD_Set_symbol(SSD_M,temp/10);
     4da:	6c 2f       	mov	r22, r28
     4dc:	81 e0       	ldi	r24, 0x01	; 1
     4de:	0e 94 c9 04 	call	0x992	; 0x992 <SSD_Set_symbol>
		
		Time+=DISP_PERIOD;
     4e2:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <__data_end>
     4e6:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <__data_end+0x1>
     4ea:	4c 5e       	subi	r20, 0xEC	; 236
     4ec:	5f 4f       	sbci	r21, 0xFF	; 255
     4ee:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <__data_end+0x1>
     4f2:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <__data_end>
		
		if (Time%1000==0) //To blink every 1 Sec
     4f6:	9a 01       	movw	r18, r20
     4f8:	36 95       	lsr	r19
     4fa:	27 95       	ror	r18
     4fc:	36 95       	lsr	r19
     4fe:	27 95       	ror	r18
     500:	36 95       	lsr	r19
     502:	27 95       	ror	r18
     504:	a5 ec       	ldi	r26, 0xC5	; 197
     506:	b0 e2       	ldi	r27, 0x20	; 32
     508:	0e 94 47 0a 	call	0x148e	; 0x148e <__umulhisi3>
     50c:	92 95       	swap	r25
     50e:	82 95       	swap	r24
     510:	8f 70       	andi	r24, 0x0F	; 15
     512:	89 27       	eor	r24, r25
     514:	9f 70       	andi	r25, 0x0F	; 15
     516:	89 27       	eor	r24, r25
     518:	68 ee       	ldi	r22, 0xE8	; 232
     51a:	73 e0       	ldi	r23, 0x03	; 3
     51c:	86 9f       	mul	r24, r22
     51e:	90 01       	movw	r18, r0
     520:	87 9f       	mul	r24, r23
     522:	30 0d       	add	r19, r0
     524:	96 9f       	mul	r25, r22
     526:	30 0d       	add	r19, r0
     528:	11 24       	eor	r1, r1
     52a:	42 17       	cp	r20, r18
     52c:	53 07       	cpc	r21, r19
     52e:	c1 f4       	brne	.+48     	; 0x560 <Display_Update+0xce>
		{
			//Bug is here
			Toggle_Pin(PIND4);
     530:	8c e1       	ldi	r24, 0x1C	; 28
     532:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Toggle_Pin>
			//Not complete
		    switch(Blink_Flag)
     536:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <Blink_Flag>
     53a:	88 23       	and	r24, r24
     53c:	69 f0       	breq	.+26     	; 0x558 <Display_Update+0xc6>
     53e:	81 30       	cpi	r24, 0x01	; 1
     540:	a1 f5       	brne	.+104    	; 0x5aa <Display_Update+0x118>
			{
				case (TRUE):
				
				Blink_Flag=FALSE;
     542:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <Blink_Flag>
				
				SSD_Set_State(SSD_R,SSD_OFF);
     546:	61 e0       	ldi	r22, 0x01	; 1
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 cf 04 	call	0x99e	; 0x99e <SSD_Set_State>
				
				SSD_Set_State(SSD_M,SSD_OFF);
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	0e 94 cf 04 	call	0x99e	; 0x99e <SSD_Set_State>
				
				break;
     556:	29 c0       	rjmp	.+82     	; 0x5aa <Display_Update+0x118>
				
				case (FALSE):
				
				Blink_Flag=TRUE;
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Blink_Flag>
									
				//	SSD_update(); // here timing characteristics  is not correct as every 5 dis counter gives 1 SSD_Counter tick
				// So we will make variable (Blink_Flag) with get function & check for On in while loop
					
					
				break;
     55e:	25 c0       	rjmp	.+74     	; 0x5aa <Display_Update+0x118>
			}
			
		}
		else
		{
		SSD_Set_State(SSD_R,SSD_OFF);
     560:	61 e0       	ldi	r22, 0x01	; 1
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	0e 94 cf 04 	call	0x99e	; 0x99e <SSD_Set_State>
		SSD_Set_State(SSD_M,SSD_OFF);
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 cf 04 	call	0x99e	; 0x99e <SSD_Set_State>
     570:	1c c0       	rjmp	.+56     	; 0x5aa <Display_Update+0x118>
					
	
	}
	else
	{
		temp=Get_Temperature();
     572:	0e 94 b3 06 	call	0xd66	; 0xd66 <Get_Temperature>
		
		SSD_Set_symbol(SSD_R,temp%10);
     576:	cd ec       	ldi	r28, 0xCD	; 205
     578:	8c 9f       	mul	r24, r28
     57a:	c1 2d       	mov	r28, r1
     57c:	11 24       	eor	r1, r1
     57e:	c6 95       	lsr	r28
     580:	c6 95       	lsr	r28
     582:	c6 95       	lsr	r28
     584:	2c 2f       	mov	r18, r28
     586:	22 0f       	add	r18, r18
     588:	92 2f       	mov	r25, r18
     58a:	99 0f       	add	r25, r25
     58c:	99 0f       	add	r25, r25
     58e:	92 0f       	add	r25, r18
     590:	68 2f       	mov	r22, r24
     592:	69 1b       	sub	r22, r25
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	0e 94 c9 04 	call	0x992	; 0x992 <SSD_Set_symbol>
				
		SSD_Set_symbol(SSD_M,temp/10);
     59a:	6c 2f       	mov	r22, r28
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 c9 04 	call	0x992	; 0x992 <SSD_Set_symbol>
			
		Time=0;
     5a2:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
     5a6:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
	




     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <Elements_Init>:
static t_ELEMENT_STATE Element_Flag=COOLING_STATE;

void Elements_Init()
{
	
	Pin_Init(HEATING_ELEMENT_PIN,OUTPUT);
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	8b e0       	ldi	r24, 0x0B	; 11
     5b2:	0e 94 a1 00 	call	0x142	; 0x142 <Pin_Init>
	
	Pin_Init(COOLING_ELEMENT_PIN,OUTPUT);
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	8c e0       	ldi	r24, 0x0C	; 12
     5ba:	0e 94 a1 00 	call	0x142	; 0x142 <Pin_Init>
	
	Set_Pin(HEATING_ELEMENT_PIN,LOW);
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	8b e0       	ldi	r24, 0x0B	; 11
     5c2:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
		
	Set_Pin(COOLING_ELEMENT_PIN,LOW);
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	8c e0       	ldi	r24, 0x0C	; 12
     5ca:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
     5ce:	08 95       	ret

000005d0 <Element_Update>:
	
	
}

void Element_Update()
{
     5d0:	cf 93       	push	r28
	static uint16 Element_Counter=0;
	Element_Counter+=OS_TICK;
     5d2:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <Element_Counter.1960>
     5d6:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <Element_Counter.1960+0x1>
     5da:	01 96       	adiw	r24, 0x01	; 1
	uint8 User_req_Temp=0;
	uint8 Actual_Temp=0;
	static uint8 Result=0;
	if (Element_Counter!=ELEMENT_ACTION_PERIOD_MS)
     5dc:	88 3e       	cpi	r24, 0xE8	; 232
     5de:	23 e0       	ldi	r18, 0x03	; 3
     5e0:	92 07       	cpc	r25, r18
     5e2:	29 f0       	breq	.+10     	; 0x5ee <Element_Update+0x1e>
}

void Element_Update()
{
	static uint16 Element_Counter=0;
	Element_Counter+=OS_TICK;
     5e4:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <Element_Counter.1960+0x1>
     5e8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <Element_Counter.1960>
     5ec:	40 c0       	rjmp	.+128    	; 0x66e <Element_Update+0x9e>
	if (Element_Counter!=ELEMENT_ACTION_PERIOD_MS)
	{
		return;
	}
	
	Element_Counter=0;
     5ee:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <Element_Counter.1960+0x1>
     5f2:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <Element_Counter.1960>
	Actual_Temp=Get_Temperature();
     5f6:	0e 94 b3 06 	call	0xd66	; 0xd66 <Get_Temperature>
     5fa:	c8 2f       	mov	r28, r24
	
	User_req_Temp=Temp_Setting_Get_Temp();
     5fc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <Temp_Setting_Get_Temp>
	
	Result=abs(Actual_Temp-User_req_Temp);
	
	//Bug is here Fix it 
	if (Actual_Temp!=0)
     600:	cc 23       	and	r28, r28
     602:	a9 f1       	breq	.+106    	; 0x66e <Element_Update+0x9e>
	Element_Counter=0;
	Actual_Temp=Get_Temperature();
	
	User_req_Temp=Temp_Setting_Get_Temp();
	
	Result=abs(Actual_Temp-User_req_Temp);
     604:	4c 2f       	mov	r20, r28
     606:	50 e0       	ldi	r21, 0x00	; 0
     608:	48 1b       	sub	r20, r24
     60a:	51 09       	sbc	r21, r1
     60c:	9a 01       	movw	r18, r20
     60e:	22 f4       	brpl	.+8      	; 0x618 <Element_Update+0x48>
     610:	22 27       	eor	r18, r18
     612:	33 27       	eor	r19, r19
     614:	24 1b       	sub	r18, r20
     616:	35 0b       	sbc	r19, r21
	
	//Bug is here Fix it 
	if (Actual_Temp!=0)
	{
		//Take action
	if ((Result>=WATER_HEATER_CHANGE_RATE) && (Actual_Temp>User_req_Temp))
     618:	25 30       	cpi	r18, 0x05	; 5
     61a:	68 f0       	brcs	.+26     	; 0x636 <Element_Update+0x66>
     61c:	8c 17       	cp	r24, r28
     61e:	58 f4       	brcc	.+22     	; 0x636 <Element_Update+0x66>
	{
		Set_Pin(HEATING_ELEMENT_PIN,LOW);
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	8b e0       	ldi	r24, 0x0B	; 11
     624:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
			
		Set_Pin(COOLING_ELEMENT_PIN,HIGH);
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	8c e0       	ldi	r24, 0x0C	; 12
     62c:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
		
		Element_Flag=COOLING_STATE;
     630:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Element_Flag>
     634:	1c c0       	rjmp	.+56     	; 0x66e <Element_Update+0x9e>
	}
	//Bug is here Fix it 
	else if (Result<=WATER_HEATER_CHANGE_RATE && (Result!=0) && (Actual_Temp<User_req_Temp) )
     636:	9f ef       	ldi	r25, 0xFF	; 255
     638:	92 0f       	add	r25, r18
     63a:	95 30       	cpi	r25, 0x05	; 5
     63c:	70 f4       	brcc	.+28     	; 0x65a <Element_Update+0x8a>
     63e:	c8 17       	cp	r28, r24
     640:	60 f4       	brcc	.+24     	; 0x65a <Element_Update+0x8a>
	{
		Set_Pin(HEATING_ELEMENT_PIN,HIGH);
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	8b e0       	ldi	r24, 0x0B	; 11
     646:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
					
		Set_Pin(COOLING_ELEMENT_PIN,LOW);
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	8c e0       	ldi	r24, 0x0C	; 12
     64e:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
		
		Element_Flag=HEATING_STATE;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Element_Flag>
     658:	0a c0       	rjmp	.+20     	; 0x66e <Element_Update+0x9e>
	}
	// This Check for protection 
	else if (Result>MAX_TEMP_ERROR)
     65a:	20 31       	cpi	r18, 0x10	; 16
     65c:	40 f0       	brcs	.+16     	; 0x66e <Element_Update+0x9e>
	{
		Set_Pin(HEATING_ELEMENT_PIN,LOW);
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	8b e0       	ldi	r24, 0x0B	; 11
     662:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
		
		Set_Pin(COOLING_ELEMENT_PIN,LOW);
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	8c e0       	ldi	r24, 0x0C	; 12
     66a:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
		//...Do_Nothiing
		
	}
	
	}
}
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <Get_Element_State>:
t_ELEMENT_STATE Get_Element_State()
{
	return Element_Flag;
     672:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Element_Flag>
     676:	08 95       	ret

00000678 <External_EEPROM_Init>:
#include "I2C.h"
#include "External_EEPROM.h"
#include "data_types.h"
void External_EEPROM_Init()
{
  I2C_Init(I2C_TX);
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <I2C_Init>
     67e:	08 95       	ret

00000680 <External_EEPROM_Write>:
}

t_EX_EEprom_state External_EEPROM_Write(uint8 data,uint16 add)
{
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	18 2f       	mov	r17, r24
     688:	eb 01       	movw	r28, r22
	t_EX_EEprom_state ret=ERROR;
	
	t_I2C_State status;
	
	I2C_Start();
     68a:	0e 94 07 04 	call	0x80e	; 0x80e <I2C_Start>
	
	status=I2C_GetStatus();
     68e:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_GetStatus>
	
	if (status!=START_TRANSMITTED)
     692:	88 30       	cpi	r24, 0x08	; 8
     694:	09 f5       	brne	.+66     	; 0x6d8 <External_EEPROM_Write+0x58>
	{
		return ret;
	}
	
	I2C_Write((uint8)(0xA0|((add & 0x0700)>>7)));
     696:	ce 01       	movw	r24, r28
     698:	88 27       	eor	r24, r24
     69a:	97 70       	andi	r25, 0x07	; 7
     69c:	88 0f       	add	r24, r24
     69e:	89 2f       	mov	r24, r25
     6a0:	88 1f       	adc	r24, r24
     6a2:	99 0b       	sbc	r25, r25
     6a4:	91 95       	neg	r25
     6a6:	80 6a       	ori	r24, 0xA0	; 160
     6a8:	0e 94 10 04 	call	0x820	; 0x820 <I2C_Write>
	status=I2C_GetStatus();
     6ac:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_GetStatus>
	if (status!=SLA_W_ACK_REC)
     6b0:	88 31       	cpi	r24, 0x18	; 24
     6b2:	a1 f4       	brne	.+40     	; 0x6dc <External_EEPROM_Write+0x5c>
	{
		return ret;
	}
	
	I2C_Write((uint8)add);
     6b4:	8c 2f       	mov	r24, r28
     6b6:	0e 94 10 04 	call	0x820	; 0x820 <I2C_Write>
	status=I2C_GetStatus();
     6ba:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_GetStatus>
	if (status!=DATA_TRANSMITTED_ACK_REC)
     6be:	88 32       	cpi	r24, 0x28	; 40
     6c0:	79 f4       	brne	.+30     	; 0x6e0 <External_EEPROM_Write+0x60>
	{
		return ret;
	}
	
	I2C_Write(data);
     6c2:	81 2f       	mov	r24, r17
     6c4:	0e 94 10 04 	call	0x820	; 0x820 <I2C_Write>
	
	status=I2C_GetStatus();
     6c8:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_GetStatus>
	
	if (status!=DATA_TRANSMITTED_ACK_REC)
     6cc:	88 32       	cpi	r24, 0x28	; 40
     6ce:	51 f4       	brne	.+20     	; 0x6e4 <External_EEPROM_Write+0x64>
	{
		return ret;
	}
	I2C_Stop();
     6d0:	0e 94 0d 04 	call	0x81a	; 0x81a <I2C_Stop>


   ret=SUCCESS;
   return ret;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	07 c0       	rjmp	.+14     	; 0x6e6 <External_EEPROM_Write+0x66>
	
	status=I2C_GetStatus();
	
	if (status!=START_TRANSMITTED)
	{
		return ret;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	05 c0       	rjmp	.+10     	; 0x6e6 <External_EEPROM_Write+0x66>
	
	I2C_Write((uint8)(0xA0|((add & 0x0700)>>7)));
	status=I2C_GetStatus();
	if (status!=SLA_W_ACK_REC)
	{
		return ret;
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	03 c0       	rjmp	.+6      	; 0x6e6 <External_EEPROM_Write+0x66>
	
	I2C_Write((uint8)add);
	status=I2C_GetStatus();
	if (status!=DATA_TRANSMITTED_ACK_REC)
	{
		return ret;
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <External_EEPROM_Write+0x66>
	
	status=I2C_GetStatus();
	
	if (status!=DATA_TRANSMITTED_ACK_REC)
	{
		return ret;
     6e4:	80 e0       	ldi	r24, 0x00	; 0
	I2C_Stop();


   ret=SUCCESS;
   return ret;
}
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	08 95       	ret

000006ee <External_EEPROM_Read>:
t_EX_EEprom_state External_EEPROM_Read(uint16 add,uint8 *pdata)
{
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
     6fc:	8b 01       	movw	r16, r22
	t_EX_EEprom_state ret=ERROR;
	
	t_I2C_State status;
	
	I2C_Start();
     6fe:	0e 94 07 04 	call	0x80e	; 0x80e <I2C_Start>
	
	status=I2C_GetStatus();
     702:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_GetStatus>
	
	if (status!=START_TRANSMITTED)
     706:	88 30       	cpi	r24, 0x08	; 8
     708:	91 f5       	brne	.+100    	; 0x76e <External_EEPROM_Read+0x80>
	{
		return ret;
	}
	
	I2C_Write((uint8)(0xA0|((add & 0x0700)>>7)));
     70a:	7e 01       	movw	r14, r28
     70c:	ee 24       	eor	r14, r14
     70e:	87 e0       	ldi	r24, 0x07	; 7
     710:	f8 22       	and	r15, r24
     712:	ee 0c       	add	r14, r14
     714:	ef 2c       	mov	r14, r15
     716:	ee 1c       	adc	r14, r14
     718:	ff 08       	sbc	r15, r15
     71a:	f1 94       	neg	r15
     71c:	8e 2d       	mov	r24, r14
     71e:	80 6a       	ori	r24, 0xA0	; 160
     720:	0e 94 10 04 	call	0x820	; 0x820 <I2C_Write>
	status=I2C_GetStatus();
     724:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_GetStatus>
	if (status!=SLA_W_ACK_REC)
     728:	88 31       	cpi	r24, 0x18	; 24
     72a:	19 f5       	brne	.+70     	; 0x772 <External_EEPROM_Read+0x84>
	{
		return ret;
	}
	
	I2C_Write((uint8)add);
     72c:	8c 2f       	mov	r24, r28
     72e:	0e 94 10 04 	call	0x820	; 0x820 <I2C_Write>
	status=I2C_GetStatus();
     732:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_GetStatus>
	if (status!=DATA_TRANSMITTED_ACK_REC)
     736:	88 32       	cpi	r24, 0x28	; 40
     738:	f1 f4       	brne	.+60     	; 0x776 <External_EEPROM_Read+0x88>
	{
		return ret;
	}
	I2C_Start();
     73a:	0e 94 07 04 	call	0x80e	; 0x80e <I2C_Start>
	status=I2C_GetStatus();
     73e:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_GetStatus>
	if(status!=RPEATED_START_TRANMITTED)
     742:	80 31       	cpi	r24, 0x10	; 16
     744:	d1 f4       	brne	.+52     	; 0x77a <External_EEPROM_Read+0x8c>
	{
	   return ret;
	}
	I2C_Write((uint8)(0xA0|((add & 0x0700)>>7)|1));
     746:	8e 2d       	mov	r24, r14
     748:	81 6a       	ori	r24, 0xA1	; 161
     74a:	0e 94 10 04 	call	0x820	; 0x820 <I2C_Write>
	status=I2C_GetStatus();
     74e:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_GetStatus>
	if (status!=SLA_R_ACK_REC)
     752:	80 34       	cpi	r24, 0x40	; 64
     754:	a1 f4       	brne	.+40     	; 0x77e <External_EEPROM_Read+0x90>
	{
		return ret;
	}
	*pdata=I2C_ReadWithNACK();
     756:	0e 94 17 04 	call	0x82e	; 0x82e <I2C_ReadWithNACK>
     75a:	f8 01       	movw	r30, r16
     75c:	80 83       	st	Z, r24
	status=I2C_GetStatus();
     75e:	0e 94 1e 04 	call	0x83c	; 0x83c <I2C_GetStatus>
	if (status!=DATA_SENT_NO_ACK_REC)
     762:	88 35       	cpi	r24, 0x58	; 88
     764:	71 f4       	brne	.+28     	; 0x782 <External_EEPROM_Read+0x94>
	{
		return ret;
	}
	
	I2C_Stop();
     766:	0e 94 0d 04 	call	0x81a	; 0x81a <I2C_Stop>
    ret=SUCCESS;



return ret;
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	0b c0       	rjmp	.+22     	; 0x784 <External_EEPROM_Read+0x96>
	
	status=I2C_GetStatus();
	
	if (status!=START_TRANSMITTED)
	{
		return ret;
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	09 c0       	rjmp	.+18     	; 0x784 <External_EEPROM_Read+0x96>
	
	I2C_Write((uint8)(0xA0|((add & 0x0700)>>7)));
	status=I2C_GetStatus();
	if (status!=SLA_W_ACK_REC)
	{
		return ret;
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	07 c0       	rjmp	.+14     	; 0x784 <External_EEPROM_Read+0x96>
	
	I2C_Write((uint8)add);
	status=I2C_GetStatus();
	if (status!=DATA_TRANSMITTED_ACK_REC)
	{
		return ret;
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	05 c0       	rjmp	.+10     	; 0x784 <External_EEPROM_Read+0x96>
	}
	I2C_Start();
	status=I2C_GetStatus();
	if(status!=RPEATED_START_TRANMITTED)
	{
	   return ret;
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	03 c0       	rjmp	.+6      	; 0x784 <External_EEPROM_Read+0x96>
	}
	I2C_Write((uint8)(0xA0|((add & 0x0700)>>7)|1));
	status=I2C_GetStatus();
	if (status!=SLA_R_ACK_REC)
	{
		return ret;
     77e:	80 e0       	ldi	r24, 0x00	; 0
     780:	01 c0       	rjmp	.+2      	; 0x784 <External_EEPROM_Read+0x96>
	}
	*pdata=I2C_ReadWithNACK();
	status=I2C_GetStatus();
	if (status!=DATA_SENT_NO_ACK_REC)
	{
		return ret;
     782:	80 e0       	ldi	r24, 0x00	; 0


return ret;


     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	08 95       	ret

00000792 <__vector_19>:
{
	/*
	*assign callBack function to call when data received  
	*/
	Static_CallBackRX = pass_callBack;
	TWCR |=  (1 << TWEN) | (1<<TWEA) | (1<<TWIE);  // to enable interrupts 
     792:	1f 92       	push	r1
     794:	0f 92       	push	r0
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	0f 92       	push	r0
     79a:	11 24       	eor	r1, r1
     79c:	2f 93       	push	r18
     79e:	3f 93       	push	r19
     7a0:	4f 93       	push	r20
     7a2:	5f 93       	push	r21
     7a4:	6f 93       	push	r22
     7a6:	7f 93       	push	r23
     7a8:	8f 93       	push	r24
     7aa:	9f 93       	push	r25
     7ac:	af 93       	push	r26
     7ae:	bf 93       	push	r27
     7b0:	ef 93       	push	r30
     7b2:	ff 93       	push	r31
     7b4:	80 91 9f 00 	lds	r24, 0x009F	; 0x80009f <i2c_status>
     7b8:	81 30       	cpi	r24, 0x01	; 1
     7ba:	31 f4       	brne	.+12     	; 0x7c8 <__vector_19+0x36>
     7bc:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <Static_callBackTx>
     7c0:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <Static_callBackTx+0x1>
     7c4:	09 95       	icall
     7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <__vector_19+0x46>
     7c8:	e0 91 9d 00 	lds	r30, 0x009D	; 0x80009d <Static_CallBackRX>
     7cc:	f0 91 9e 00 	lds	r31, 0x009E	; 0x80009e <Static_CallBackRX+0x1>
     7d0:	85 ec       	ldi	r24, 0xC5	; 197
     7d2:	86 bf       	out	0x36, r24	; 54
     7d4:	83 b1       	in	r24, 0x03	; 3
     7d6:	09 95       	icall
     7d8:	ff 91       	pop	r31
     7da:	ef 91       	pop	r30
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	0f 90       	pop	r0
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	0f 90       	pop	r0
     7f6:	1f 90       	pop	r1
     7f8:	18 95       	reti

000007fa <I2C_Init>:
     7fa:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <i2c_status>
     7fe:	82 e0       	ldi	r24, 0x02	; 2
     800:	80 b9       	out	0x00, r24	; 0
     802:	11 b8       	out	0x01, r1	; 1
     804:	80 ed       	ldi	r24, 0xD0	; 208
     806:	82 b9       	out	0x02, r24	; 2
     808:	84 e0       	ldi	r24, 0x04	; 4
     80a:	86 bf       	out	0x36, r24	; 54
     80c:	08 95       	ret

0000080e <I2C_Start>:
     80e:	84 ea       	ldi	r24, 0xA4	; 164
     810:	86 bf       	out	0x36, r24	; 54
     812:	06 b6       	in	r0, 0x36	; 54
     814:	07 fe       	sbrs	r0, 7
     816:	fd cf       	rjmp	.-6      	; 0x812 <I2C_Start+0x4>
     818:	08 95       	ret

0000081a <I2C_Stop>:
     81a:	84 e9       	ldi	r24, 0x94	; 148
     81c:	86 bf       	out	0x36, r24	; 54
     81e:	08 95       	ret

00000820 <I2C_Write>:
     820:	83 b9       	out	0x03, r24	; 3
     822:	84 e8       	ldi	r24, 0x84	; 132
     824:	86 bf       	out	0x36, r24	; 54
     826:	06 b6       	in	r0, 0x36	; 54
     828:	07 fe       	sbrs	r0, 7
     82a:	fd cf       	rjmp	.-6      	; 0x826 <I2C_Write+0x6>
     82c:	08 95       	ret

0000082e <I2C_ReadWithNACK>:
{
	/* Clear the TWINT flag before reading the data TWINT=1
	 * enable sending ACK TWEA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     82e:	84 e8       	ldi	r24, 0x84	; 132
     830:	86 bf       	out	0x36, r24	; 54
    // Wait for TWINT flag set in TWCR Register (data received successfully) 
    while (I2C_BUSY);
     832:	06 b6       	in	r0, 0x36	; 54
     834:	07 fe       	sbrs	r0, 7
     836:	fd cf       	rjmp	.-6      	; 0x832 <I2C_ReadWithNACK+0x4>
    // Read Data
    return TWDR;
     838:	83 b1       	in	r24, 0x03	; 3
}
     83a:	08 95       	ret

0000083c <I2C_GetStatus>:

t_I2C_State I2C_GetStatus(void)
{
    t_I2C_State status;
    status = TWSR & 0xF8; //masking to eliminate first 3 bits 
     83c:	81 b1       	in	r24, 0x01	; 1
    return status;
}
     83e:	88 7f       	andi	r24, 0xF8	; 248
     840:	08 95       	ret

00000842 <LED_Init>:
#define LED_PERIOD  (1000)


void LED_Init()
{
	Pin_Init(LED_PIN,OUTPUT);
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	8d e0       	ldi	r24, 0x0D	; 13
     846:	0e 94 a1 00 	call	0x142	; 0x142 <Pin_Init>
	Set_Pin(LED_PIN,LOW);
     84a:	60 e0       	ldi	r22, 0x00	; 0
     84c:	8d e0       	ldi	r24, 0x0D	; 13
     84e:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
     852:	08 95       	ret

00000854 <LED_Update>:

void LED_Update()
{
	static uint16 Led_Counter=0;
	t_ELEMENT_STATE Led_flag;
	Led_Counter+=OS_TICK;
     854:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <Led_Counter.1793>
     858:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <Led_Counter.1793+0x1>
     85c:	01 96       	adiw	r24, 0x01	; 1
	if (Led_Counter!=LED_PERIOD)
     85e:	88 3e       	cpi	r24, 0xE8	; 232
     860:	23 e0       	ldi	r18, 0x03	; 3
     862:	92 07       	cpc	r25, r18
     864:	29 f0       	breq	.+10     	; 0x870 <__stack+0x11>

void LED_Update()
{
	static uint16 Led_Counter=0;
	t_ELEMENT_STATE Led_flag;
	Led_Counter+=OS_TICK;
     866:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <Led_Counter.1793+0x1>
     86a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <Led_Counter.1793>
     86e:	08 95       	ret
	if (Led_Counter!=LED_PERIOD)
	{
		return;
	}
	Led_Counter=0;
     870:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <Led_Counter.1793+0x1>
     874:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Led_Counter.1793>
	Led_flag=Get_Element_State();
     878:	0e 94 39 03 	call	0x672	; 0x672 <Get_Element_State>
	switch(Led_flag)
     87c:	88 23       	and	r24, r24
     87e:	31 f0       	breq	.+12     	; 0x88c <__stack+0x2d>
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	41 f4       	brne	.+16     	; 0x894 <__stack+0x35>
	{
		case HEATING_STATE:
		Toggle_Pin(LED_PIN);
     884:	8d e0       	ldi	r24, 0x0D	; 13
     886:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <Toggle_Pin>
		break;
     88a:	08 95       	ret
		
		case COOLING_STATE:
		Set_Pin(LED_PIN,HIGH);
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	8d e0       	ldi	r24, 0x0D	; 13
     890:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
     894:	08 95       	ret

00000896 <T1_my_func>:
void System_Init();

static void T1_my_func()
{
	
		Status_flag=TRUE;
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Status_flag>
     89c:	08 95       	ret

0000089e <System_Init>:
}
void System_Init()
{
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <System_Init+0x6>
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
	t_EX_EEprom_state Eeprom_flag;
	
	uint8 Init_flag;
	uint8 temp=0;
     8a8:	1a 82       	std	Y+2, r1	; 0x02
	//System
	Elements_Init();
     8aa:	0e 94 d7 02 	call	0x5ae	; 0x5ae <Elements_Init>
	
	Sw_Init();
     8ae:	0e 94 4c 05 	call	0xa98	; 0xa98 <Sw_Init>
	
	Display_Init();
     8b2:	0e 94 36 02 	call	0x46c	; 0x46c <Display_Init>
	
	Temp_Setting_Init();
     8b6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <Temp_Setting_Init>
	
	LED_Init();
     8ba:	0e 94 21 04 	call	0x842	; 0x842 <LED_Init>
	
	//Ex_EEprom
	External_EEPROM_Init();
     8be:	0e 94 3c 03 	call	0x678	; 0x678 <External_EEPROM_Init>
	
	Eeprom_flag=External_EEPROM_Read(INIT_FLAG_ADDERESS,&Init_flag);
     8c2:	be 01       	movw	r22, r28
     8c4:	6f 5f       	subi	r22, 0xFF	; 255
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	0e 94 77 03 	call	0x6ee	; 0x6ee <External_EEPROM_Read>
	if (Init_flag!=USER_DEFAULT)
     8d0:	89 81       	ldd	r24, Y+1	; 0x01
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	d1 f0       	breq	.+52     	; 0x90a <System_Init+0x6c>
	{
		// Mark as Used now!

		Eeprom_flag=External_EEPROM_Write(USER_DEFAULT,INIT_FLAG_ADDERESS);
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	0e 94 40 03 	call	0x680	; 0x680 <External_EEPROM_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e0:	ef e1       	ldi	r30, 0x1F	; 31
     8e2:	fe e4       	ldi	r31, 0x4E	; 78
     8e4:	31 97       	sbiw	r30, 0x01	; 1
     8e6:	f1 f7       	brne	.-4      	; 0x8e4 <System_Init+0x46>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <System_Init+0x4c>
     8ea:	00 00       	nop
		//delay 10ms
		_delay_ms(10);
		if (Eeprom_flag==SUCCESS)
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	31 f4       	brne	.+12     	; 0x8fc <System_Init+0x5e>
		{
			Eeprom_flag=External_EEPROM_Write(Temp_Setting_Get_Temp(),USER_TEMP_SAVING_ADDERESS);
     8f0:	0e 94 0f 07 	call	0xe1e	; 0xe1e <Temp_Setting_Get_Temp>
     8f4:	61 e0       	ldi	r22, 0x01	; 1
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	0e 94 40 03 	call	0x680	; 0x680 <External_EEPROM_Write>
     8fc:	8f e1       	ldi	r24, 0x1F	; 31
     8fe:	9e e4       	ldi	r25, 0x4E	; 78
     900:	01 97       	sbiw	r24, 0x01	; 1
     902:	f1 f7       	brne	.-4      	; 0x900 <System_Init+0x62>
     904:	00 c0       	rjmp	.+0      	; 0x906 <System_Init+0x68>
     906:	00 00       	nop
     908:	10 c0       	rjmp	.+32     	; 0x92a <System_Init+0x8c>
		
	}
	else
	{
		//Modify user_temp variable
		Eeprom_flag=External_EEPROM_Read(USER_TEMP_SAVING_ADDERESS,&temp);
     90a:	be 01       	movw	r22, r28
     90c:	6e 5f       	subi	r22, 0xFE	; 254
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 77 03 	call	0x6ee	; 0x6ee <External_EEPROM_Read>
		if (Eeprom_flag==SUCCESS)
     918:	81 30       	cpi	r24, 0x01	; 1
     91a:	39 f4       	brne	.+14     	; 0x92a <System_Init+0x8c>
		{
			
			
			if ((temp<75)&&(temp>30))
     91c:	8a 81       	ldd	r24, Y+2	; 0x02
     91e:	91 ee       	ldi	r25, 0xE1	; 225
     920:	98 0f       	add	r25, r24
     922:	9c 32       	cpi	r25, 0x2C	; 44
     924:	10 f4       	brcc	.+4      	; 0x92a <System_Init+0x8c>
			{
				Temp_Setting_Set_Temp(temp);
     926:	0e 94 15 07 	call	0xe2a	; 0xe2a <Temp_Setting_Set_Temp>
			}
			
		}
	}
	
	Temperature_Init();
     92a:	0e 94 48 06 	call	0xc90	; 0xc90 <Temperature_Init>
	//Scheduler
	
	Timer1_CTC_OC1RA_Set_Call_Back(T1_my_func);
     92e:	8b e4       	ldi	r24, 0x4B	; 75
     930:	94 e0       	ldi	r25, 0x04	; 4
     932:	0e 94 6e 08 	call	0x10dc	; 0x10dc <Timer1_CTC_OC1RA_Set_Call_Back>
	
	Timer1_OCR1A=999;
     936:	87 ee       	ldi	r24, 0xE7	; 231
     938:	93 e0       	ldi	r25, 0x03	; 3
     93a:	9b bd       	out	0x2b, r25	; 43
     93c:	8a bd       	out	0x2a, r24	; 42
	
	Timer1_Init(TIMER1_CTC_OCRA_TOP_MODE,TIMER1_PRESCALING_CLK8,OC1RA_DISCONNECTED,OC1RB_DISCONNECTED);
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	40 e0       	ldi	r20, 0x00	; 0
     942:	62 e0       	ldi	r22, 0x02	; 2
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	0e 94 73 07 	call	0xee6	; 0xee6 <Timer1_Init>
	
	Timer1_CTC_OCR1A_Interrupt_State(TIMER1_CTC_OC1RA_INT_ENABLE);
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <Timer1_CTC_OCR1A_Interrupt_State>
	
	GLOBAL_INTERUPT_ENABLE;
     950:	78 94       	sei
	
}
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	08 95       	ret

0000095c <main>:
int main(void)
{
	Bool_t flag;
	
	System_Init();	
     95c:	0e 94 4f 04 	call	0x89e	; 0x89e <System_Init>
	
    while (1) 
    {
		if (Status_flag==TRUE)
     960:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Status_flag>
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	e1 f7       	brne	.-8      	; 0x960 <main+0x4>
		{
			flag=Get_state();
     968:	0e 94 33 02 	call	0x466	; 0x466 <Get_state>
			
			if (flag==FALSE)
     96c:	81 11       	cpse	r24, r1
     96e:	02 c0       	rjmp	.+4      	; 0x974 <main+0x18>
			{
				SSD_Update();
     970:	0e 94 25 05 	call	0xa4a	; 0xa4a <SSD_Update>
			}
						
			Display_Update();
     974:	0e 94 49 02 	call	0x492	; 0x492 <Display_Update>
			
			Sw_Update();
     978:	0e 94 5f 05 	call	0xabe	; 0xabe <Sw_Update>
			
			Temp_Setting_Update();
     97c:	0e 94 ba 06 	call	0xd74	; 0xd74 <Temp_Setting_Update>
			
			Temperature_Update();	
     980:	0e 94 59 06 	call	0xcb2	; 0xcb2 <Temperature_Update>
			
			Element_Update();
     984:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <Element_Update>
			
			LED_Update();
     988:	0e 94 2a 04 	call	0x854	; 0x854 <LED_Update>
			
			Status_flag=FALSE;
     98c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <Status_flag>
     990:	e7 cf       	rjmp	.-50     	; 0x960 <main+0x4>

00000992 <SSD_Set_symbol>:


void SSD_Set_symbol(tSSD ssd, tSSD_Symbol symbl)
{
	
	SSD_Buffer[ssd]=symbl;
     992:	e8 2f       	mov	r30, r24
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	ee 59       	subi	r30, 0x9E	; 158
     998:	ff 4f       	sbci	r31, 0xFF	; 255
     99a:	60 83       	st	Z, r22
     99c:	08 95       	ret

0000099e <SSD_Set_State>:
}

void SSD_Set_State(tSSD ssd, tSSD_STATE state)
{
	switch(ssd)
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	51 f0       	breq	.+20     	; 0x9b6 <SSD_Set_State+0x18>
     9a2:	28 f0       	brcs	.+10     	; 0x9ae <SSD_Set_State+0x10>
     9a4:	82 30       	cpi	r24, 0x02	; 2
     9a6:	59 f0       	breq	.+22     	; 0x9be <SSD_Set_State+0x20>
     9a8:	83 30       	cpi	r24, 0x03	; 3
     9aa:	69 f0       	breq	.+26     	; 0x9c6 <SSD_Set_State+0x28>
     9ac:	08 95       	ret
	{
		case SSD_R:
		Set_Pin(SSDR,state);
     9ae:	82 e1       	ldi	r24, 0x12	; 18
     9b0:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
		break;
     9b4:	08 95       	ret
		
		case SSD_M:
		Set_Pin(SSDM,state);
     9b6:	83 e1       	ldi	r24, 0x13	; 19
     9b8:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
		break;
     9bc:	08 95       	ret

		case SSD_N:
		Set_Pin(SSDN,state);
     9be:	84 e1       	ldi	r24, 0x14	; 20
     9c0:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
		break;
     9c4:	08 95       	ret
		
		case SSD_L:
		Set_Pin(SSDL,state);
     9c6:	85 e1       	ldi	r24, 0x15	; 21
     9c8:	0e 94 89 01 	call	0x312	; 0x312 <Set_Pin>
     9cc:	08 95       	ret

000009ce <SSD_Out>:
	}
	
	
}
static void SSD_Out(tSSD ssd,tSSD_Symbol symbl)
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	d8 2f       	mov	r29, r24
     9d4:	c6 2f       	mov	r28, r22
	
	SSD_Set_State(SSD_R,SSD_OFF);
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	0e 94 cf 04 	call	0x99e	; 0x99e <SSD_Set_State>
	
	SSD_Set_State(SSD_M,SSD_OFF);
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	81 e0       	ldi	r24, 0x01	; 1
     9e2:	0e 94 cf 04 	call	0x99e	; 0x99e <SSD_Set_State>
	//Not Used 
	//SSD_Set_State(SSD_N,SSD_OFF);
	
	//SSD_Set_State(SSD_L,SSD_OFF);
	
	Set_Port(SSD_PORT,SSD_Data[symbl]);
     9e6:	ec 2f       	mov	r30, r28
     9e8:	f0 e0       	ldi	r31, 0x00	; 0
     9ea:	ea 59       	subi	r30, 0x9A	; 154
     9ec:	ff 4f       	sbci	r31, 0xFF	; 255
     9ee:	60 81       	ld	r22, Z
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	0e 94 23 02 	call	0x446	; 0x446 <Set_Port>
	
	SSD_Set_State(ssd,SSD_ON);
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	8d 2f       	mov	r24, r29
     9fa:	0e 94 cf 04 	call	0x99e	; 0x99e <SSD_Set_State>
	
}
     9fe:	df 91       	pop	r29
     a00:	cf 91       	pop	r28
     a02:	08 95       	ret

00000a04 <SSD_Init>:


static void SSD_Out(tSSD ssd,tSSD_Symbol symbl);

void SSD_Init(tSSD ssd)
{
     a04:	cf 93       	push	r28
     a06:	c8 2f       	mov	r28, r24

  
  switch(ssd)
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	59 f0       	breq	.+22     	; 0xa22 <SSD_Init+0x1e>
     a0c:	28 f0       	brcs	.+10     	; 0xa18 <SSD_Init+0x14>
     a0e:	82 30       	cpi	r24, 0x02	; 2
     a10:	69 f0       	breq	.+26     	; 0xa2c <SSD_Init+0x28>
     a12:	83 30       	cpi	r24, 0x03	; 3
     a14:	81 f0       	breq	.+32     	; 0xa36 <SSD_Init+0x32>
     a16:	13 c0       	rjmp	.+38     	; 0xa3e <SSD_Init+0x3a>
  {
	  	case (SSD_R):
		  Pin_Init(SSDR,OUTPUT);
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	82 e1       	ldi	r24, 0x12	; 18
     a1c:	0e 94 a1 00 	call	0x142	; 0x142 <Pin_Init>
		  break;
     a20:	0e c0       	rjmp	.+28     	; 0xa3e <SSD_Init+0x3a>
	  	case (SSD_M):
		  Pin_Init(SSDM,OUTPUT);
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	83 e1       	ldi	r24, 0x13	; 19
     a26:	0e 94 a1 00 	call	0x142	; 0x142 <Pin_Init>
		  break;
     a2a:	09 c0       	rjmp	.+18     	; 0xa3e <SSD_Init+0x3a>
	  	case (SSD_N):
		  Pin_Init(SSDN,OUTPUT);
     a2c:	60 e0       	ldi	r22, 0x00	; 0
     a2e:	84 e1       	ldi	r24, 0x14	; 20
     a30:	0e 94 a1 00 	call	0x142	; 0x142 <Pin_Init>
		  break;
     a34:	04 c0       	rjmp	.+8      	; 0xa3e <SSD_Init+0x3a>
	  	case (SSD_L):
		  Pin_Init(SSDL,OUTPUT);
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	85 e1       	ldi	r24, 0x15	; 21
     a3a:	0e 94 a1 00 	call	0x142	; 0x142 <Pin_Init>
		  break;
  }	
  
SSD_Out(ssd,SSD_NULL);
     a3e:	6a e0       	ldi	r22, 0x0A	; 10
     a40:	8c 2f       	mov	r24, r28
     a42:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SSD_Out>
}
     a46:	cf 91       	pop	r28
     a48:	08 95       	ret

00000a4a <SSD_Update>:

void SSD_Update()
{
	static  uint16 SSD_Counter=1;
	SSD_Counter+=OS_TICK;
     a4a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     a4e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     a52:	01 96       	adiw	r24, 0x01	; 1
	
	if (SSD_Counter!=SSD_PERIOD)
     a54:	85 30       	cpi	r24, 0x05	; 5
     a56:	91 05       	cpc	r25, r1
     a58:	29 f0       	breq	.+10     	; 0xa64 <SSD_Update+0x1a>
}

void SSD_Update()
{
	static  uint16 SSD_Counter=1;
	SSD_Counter+=OS_TICK;
     a5a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     a5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     a62:	08 95       	ret
	if (SSD_Counter!=SSD_PERIOD)
	{
		return;
	}
	
	SSD_Counter=1;
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     a6c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
    
	SSD_Out(Current_SSD,SSD_Buffer[Current_SSD]);
     a70:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <Current_SSD>
     a74:	e8 2f       	mov	r30, r24
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	ee 59       	subi	r30, 0x9E	; 158
     a7a:	ff 4f       	sbci	r31, 0xFF	; 255
     a7c:	60 81       	ld	r22, Z
     a7e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <SSD_Out>
	
	if (Current_SSD==(NUMBER_OF_SSD-1))
     a82:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <Current_SSD>
     a86:	81 30       	cpi	r24, 0x01	; 1
     a88:	19 f4       	brne	.+6      	; 0xa90 <SSD_Update+0x46>
	{
		Current_SSD=SSD_R;
     a8a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <Current_SSD>
     a8e:	08 95       	ret
	}
	else
	{
		Current_SSD++;
     a90:	8f 5f       	subi	r24, 0xFF	; 255
     a92:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <Current_SSD>
     a96:	08 95       	ret

00000a98 <Sw_Init>:
	    uint8 index = 0;
 
	    /* Add your code here! */
	    /* Initialize switches as inputs */
	 
	    SET_REGISTER_PIN(SW_PLUS_PORT_CR, SW_PLUS_PIN, GPIO_IN);
     a98:	b8 98       	cbi	0x17, 0	; 23
	    SET_REGISTER_PIN(SW_MINUS_PORT_CR, SW_MINUS_PIN, GPIO_IN);
     a9a:	b9 98       	cbi	0x17, 1	; 23
	    SET_REGISTER_PIN(SW_ON_OFF_PORT_CR, SW_ON_OFF_PIN, GPIO_IN);
     a9c:	ba 98       	cbi	0x17, 2	; 23

	    SET_REGISTER_PIN(SW_PLUS_PORT_DR, SW_PLUS_PIN, GPIO_OUT);
     a9e:	c0 9a       	sbi	0x18, 0	; 24
	    SET_REGISTER_PIN(SW_MINUS_PORT_DR, SW_MINUS_PIN, GPIO_OUT);
     aa0:	c1 9a       	sbi	0x18, 1	; 24
	    SET_REGISTER_PIN(SW_ON_OFF_PORT_DR, SW_ON_OFF_PIN, GPIO_OUT);
     aa2:	c2 9a       	sbi	0x18, 2	; 24

	    /* Initialize switches info */
	    for (index = SW_PLUS; index < N_SWITCHES; index++)
	    {
		 /* Initialize switch samples */
		    SWs_Info[index].sw_samples[0] = SW_RELEASED_LEVEL;
     aa4:	ed e7       	ldi	r30, 0x7D	; 125
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	80 83       	st	Z, r24
		    SWs_Info[index].sw_samples[1] = SW_RELEASED_LEVEL;
     aac:	81 83       	std	Z+1, r24	; 0x01

          /* Initialize sw state */
		    SWs_Info[index].sw_state = SW_RELEASED;
     aae:	12 82       	std	Z+2, r1	; 0x02

	    /* Initialize switches info */
	    for (index = SW_PLUS; index < N_SWITCHES; index++)
	    {
		 /* Initialize switch samples */
		    SWs_Info[index].sw_samples[0] = SW_RELEASED_LEVEL;
     ab0:	83 83       	std	Z+3, r24	; 0x03
		    SWs_Info[index].sw_samples[1] = SW_RELEASED_LEVEL;
     ab2:	84 83       	std	Z+4, r24	; 0x04

          /* Initialize sw state */
		    SWs_Info[index].sw_state = SW_RELEASED;
     ab4:	15 82       	std	Z+5, r1	; 0x05

	    /* Initialize switches info */
	    for (index = SW_PLUS; index < N_SWITCHES; index++)
	    {
		 /* Initialize switch samples */
		    SWs_Info[index].sw_samples[0] = SW_RELEASED_LEVEL;
     ab6:	86 83       	std	Z+6, r24	; 0x06
		    SWs_Info[index].sw_samples[1] = SW_RELEASED_LEVEL;
     ab8:	87 83       	std	Z+7, r24	; 0x07

          /* Initialize sw state */
		    SWs_Info[index].sw_state = SW_RELEASED;
     aba:	10 86       	std	Z+8, r1	; 0x08
     abc:	08 95       	ret

00000abe <Sw_Update>:
{
	
static uint8 Sw_Counter=1;

tSw index;
Sw_Counter+=OS_TICK;
     abe:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Sw_Counter.1808>
     ac2:	8f 5f       	subi	r24, 0xFF	; 255

if (Sw_Counter!=SW_PERIOD_MS)
     ac4:	84 31       	cpi	r24, 0x14	; 20
     ac6:	19 f0       	breq	.+6      	; 0xace <Sw_Update+0x10>
{
	
static uint8 Sw_Counter=1;

tSw index;
Sw_Counter+=OS_TICK;
     ac8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Sw_Counter.1808>
     acc:	08 95       	ret
if (Sw_Counter!=SW_PERIOD_MS)
{
	
 return;	
}
Sw_Counter=1;
     ace:	81 e0       	ldi	r24, 0x01	; 1
     ad0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Sw_Counter.1808>
     ad4:	31 e0       	ldi	r19, 0x01	; 1
		case SW_PRESSED:
		
		if ( (SWs_Info[index].sw_samples[0]==SW_RELEASED_LEVEL) &&
		(SWs_Info[index].sw_samples[1]==SW_RELEASED_LEVEL) )
		{
			SWs_Info[index].sw_state=SW_PRE_RELEASED;
     ad6:	73 e0       	ldi	r23, 0x03	; 3
		
		case SW_PRE_PRESSED:
		
		if ( (SWs_Info[index].sw_samples[1]==SW_PRESSED_LEVEL) )
		{
			SWs_Info[index].sw_state=SW_PRESSED;
     ad8:	52 e0       	ldi	r21, 0x02	; 2
	{
		case SW_RELEASED:
		if ( (SWs_Info[index].sw_samples[0]==SW_PRESSED_LEVEL) &&
		(SWs_Info[index].sw_samples[1]==SW_PRESSED_LEVEL) )
		{
			SWs_Info[index].sw_state=SW_PRE_PRESSED;
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	01 c0       	rjmp	.+2      	; 0xae0 <Sw_Update+0x22>
     ade:	3f 5f       	subi	r19, 0xFF	; 255
     ae0:	2f ef       	ldi	r18, 0xFF	; 255
     ae2:	23 0f       	add	r18, r19


for (index=SW_PLUS;index<N_SWITCHES;index++)
{
	
	SWs_Info[index].sw_samples[0]=SWs_Info[index].sw_samples[1];
     ae4:	82 2f       	mov	r24, r18
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	fc 01       	movw	r30, r24
     aea:	ee 0f       	add	r30, r30
     aec:	ff 1f       	adc	r31, r31
     aee:	e8 0f       	add	r30, r24
     af0:	f9 1f       	adc	r31, r25
     af2:	e3 58       	subi	r30, 0x83	; 131
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	41 81       	ldd	r20, Z+1	; 0x01
     af8:	40 83       	st	Z, r20
	/***********Update_Samples**********/
	switch(index)
     afa:	21 30       	cpi	r18, 0x01	; 1
     afc:	79 f0       	breq	.+30     	; 0xb1c <Sw_Update+0x5e>
     afe:	18 f0       	brcs	.+6      	; 0xb06 <Sw_Update+0x48>
     b00:	22 30       	cpi	r18, 0x02	; 2
     b02:	c1 f0       	breq	.+48     	; 0xb34 <Sw_Update+0x76>
     b04:	2e c0       	rjmp	.+92     	; 0xb62 <Sw_Update+0xa4>
	{
		case(SW_PLUS):
		SWs_Info[index].sw_samples[1]=READ_BIT(SW_PLUS_PORT_READ,SW_PLUS_PIN);
     b06:	26 b3       	in	r18, 0x16	; 22
     b08:	fc 01       	movw	r30, r24
     b0a:	ee 0f       	add	r30, r30
     b0c:	ff 1f       	adc	r31, r31
     b0e:	e8 0f       	add	r30, r24
     b10:	f9 1f       	adc	r31, r25
     b12:	e3 58       	subi	r30, 0x83	; 131
     b14:	ff 4f       	sbci	r31, 0xFF	; 255
     b16:	21 70       	andi	r18, 0x01	; 1
     b18:	21 83       	std	Z+1, r18	; 0x01
		break;
     b1a:	9b c0       	rjmp	.+310    	; 0xc52 <Sw_Update+0x194>
		
		case (SW_MINUS):
		SWs_Info[index].sw_samples[1]=READ_BIT(SW_MINUS_PORT_READ,SW_MINUS_PIN);
     b1c:	26 b3       	in	r18, 0x16	; 22
     b1e:	fc 01       	movw	r30, r24
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	e8 0f       	add	r30, r24
     b26:	f9 1f       	adc	r31, r25
     b28:	e3 58       	subi	r30, 0x83	; 131
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	26 95       	lsr	r18
     b2e:	21 70       	andi	r18, 0x01	; 1
     b30:	21 83       	std	Z+1, r18	; 0x01
		break;
     b32:	8f c0       	rjmp	.+286    	; 0xc52 <Sw_Update+0x194>
		
		case (SW_ON_OFF):
		SWs_Info[index].sw_samples[1]=READ_BIT(SW_ON_OFF_PORT_READ,SW_ON_OFF_PIN);
     b34:	26 b3       	in	r18, 0x16	; 22
     b36:	fc 01       	movw	r30, r24
     b38:	ee 0f       	add	r30, r30
     b3a:	ff 1f       	adc	r31, r31
     b3c:	e8 0f       	add	r30, r24
     b3e:	f9 1f       	adc	r31, r25
     b40:	e3 58       	subi	r30, 0x83	; 131
     b42:	ff 4f       	sbci	r31, 0xFF	; 255
     b44:	22 fb       	bst	r18, 2
     b46:	22 27       	eor	r18, r18
     b48:	20 f9       	bld	r18, 0
     b4a:	21 83       	std	Z+1, r18	; 0x01
		break;
		
	}
	
	/************Update_States*****************/
	switch(SWs_Info[index].sw_state)
     b4c:	22 81       	ldd	r18, Z+2	; 0x02
     b4e:	21 30       	cpi	r18, 0x01	; 1
     b50:	b9 f1       	breq	.+110    	; 0xbc0 <Sw_Update+0x102>
     b52:	c0 f0       	brcs	.+48     	; 0xb84 <Sw_Update+0xc6>
     b54:	22 30       	cpi	r18, 0x02	; 2
     b56:	09 f4       	brne	.+2      	; 0xb5a <Sw_Update+0x9c>
     b58:	47 c0       	rjmp	.+142    	; 0xbe8 <Sw_Update+0x12a>
     b5a:	23 30       	cpi	r18, 0x03	; 3
     b5c:	09 f4       	brne	.+2      	; 0xb60 <Sw_Update+0xa2>
     b5e:	62 c0       	rjmp	.+196    	; 0xc24 <Sw_Update+0x166>
     b60:	08 95       	ret
     b62:	fc 01       	movw	r30, r24
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	e8 0f       	add	r30, r24
     b6a:	f9 1f       	adc	r31, r25
     b6c:	e3 58       	subi	r30, 0x83	; 131
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	22 81       	ldd	r18, Z+2	; 0x02
     b72:	21 30       	cpi	r18, 0x01	; 1
     b74:	29 f1       	breq	.+74     	; 0xbc0 <Sw_Update+0x102>
     b76:	30 f0       	brcs	.+12     	; 0xb84 <Sw_Update+0xc6>
     b78:	22 30       	cpi	r18, 0x02	; 2
     b7a:	b1 f1       	breq	.+108    	; 0xbe8 <Sw_Update+0x12a>
     b7c:	23 30       	cpi	r18, 0x03	; 3
     b7e:	09 f4       	brne	.+2      	; 0xb82 <Sw_Update+0xc4>
     b80:	51 c0       	rjmp	.+162    	; 0xc24 <Sw_Update+0x166>
     b82:	63 c0       	rjmp	.+198    	; 0xc4a <Sw_Update+0x18c>
	{
		case SW_RELEASED:
		if ( (SWs_Info[index].sw_samples[0]==SW_PRESSED_LEVEL) &&
     b84:	fc 01       	movw	r30, r24
     b86:	ee 0f       	add	r30, r30
     b88:	ff 1f       	adc	r31, r31
     b8a:	e8 0f       	add	r30, r24
     b8c:	f9 1f       	adc	r31, r25
     b8e:	e3 58       	subi	r30, 0x83	; 131
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	20 81       	ld	r18, Z
     b94:	21 11       	cpse	r18, r1
     b96:	59 c0       	rjmp	.+178    	; 0xc4a <Sw_Update+0x18c>
		(SWs_Info[index].sw_samples[1]==SW_PRESSED_LEVEL) )
     b98:	fc 01       	movw	r30, r24
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	e8 0f       	add	r30, r24
     ba0:	f9 1f       	adc	r31, r25
     ba2:	e3 58       	subi	r30, 0x83	; 131
     ba4:	ff 4f       	sbci	r31, 0xFF	; 255
	
	/************Update_States*****************/
	switch(SWs_Info[index].sw_state)
	{
		case SW_RELEASED:
		if ( (SWs_Info[index].sw_samples[0]==SW_PRESSED_LEVEL) &&
     ba6:	21 81       	ldd	r18, Z+1	; 0x01
     ba8:	21 11       	cpse	r18, r1
     baa:	4f c0       	rjmp	.+158    	; 0xc4a <Sw_Update+0x18c>
		(SWs_Info[index].sw_samples[1]==SW_PRESSED_LEVEL) )
		{
			SWs_Info[index].sw_state=SW_PRE_PRESSED;
     bac:	fc 01       	movw	r30, r24
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	8e 0f       	add	r24, r30
     bb4:	9f 1f       	adc	r25, r31
     bb6:	fc 01       	movw	r30, r24
     bb8:	e3 58       	subi	r30, 0x83	; 131
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	62 83       	std	Z+2, r22	; 0x02
     bbe:	45 c0       	rjmp	.+138    	; 0xc4a <Sw_Update+0x18c>
		}
		break;
		
		case SW_PRE_PRESSED:
		
		if ( (SWs_Info[index].sw_samples[1]==SW_PRESSED_LEVEL) )
     bc0:	fc 01       	movw	r30, r24
     bc2:	ee 0f       	add	r30, r30
     bc4:	ff 1f       	adc	r31, r31
     bc6:	e8 0f       	add	r30, r24
     bc8:	f9 1f       	adc	r31, r25
     bca:	e3 58       	subi	r30, 0x83	; 131
     bcc:	ff 4f       	sbci	r31, 0xFF	; 255
     bce:	21 81       	ldd	r18, Z+1	; 0x01
     bd0:	21 11       	cpse	r18, r1
     bd2:	3b c0       	rjmp	.+118    	; 0xc4a <Sw_Update+0x18c>
		{
			SWs_Info[index].sw_state=SW_PRESSED;
     bd4:	fc 01       	movw	r30, r24
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	8e 0f       	add	r24, r30
     bdc:	9f 1f       	adc	r25, r31
     bde:	fc 01       	movw	r30, r24
     be0:	e3 58       	subi	r30, 0x83	; 131
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	52 83       	std	Z+2, r21	; 0x02
     be6:	31 c0       	rjmp	.+98     	; 0xc4a <Sw_Update+0x18c>
		
		break;
		
		case SW_PRESSED:
		
		if ( (SWs_Info[index].sw_samples[0]==SW_RELEASED_LEVEL) &&
     be8:	fc 01       	movw	r30, r24
     bea:	ee 0f       	add	r30, r30
     bec:	ff 1f       	adc	r31, r31
     bee:	e8 0f       	add	r30, r24
     bf0:	f9 1f       	adc	r31, r25
     bf2:	e3 58       	subi	r30, 0x83	; 131
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	20 81       	ld	r18, Z
     bf8:	21 30       	cpi	r18, 0x01	; 1
     bfa:	39 f5       	brne	.+78     	; 0xc4a <Sw_Update+0x18c>
		(SWs_Info[index].sw_samples[1]==SW_RELEASED_LEVEL) )
     bfc:	fc 01       	movw	r30, r24
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	e8 0f       	add	r30, r24
     c04:	f9 1f       	adc	r31, r25
     c06:	e3 58       	subi	r30, 0x83	; 131
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
		
		break;
		
		case SW_PRESSED:
		
		if ( (SWs_Info[index].sw_samples[0]==SW_RELEASED_LEVEL) &&
     c0a:	21 81       	ldd	r18, Z+1	; 0x01
     c0c:	21 30       	cpi	r18, 0x01	; 1
     c0e:	e9 f4       	brne	.+58     	; 0xc4a <Sw_Update+0x18c>
		(SWs_Info[index].sw_samples[1]==SW_RELEASED_LEVEL) )
		{
			SWs_Info[index].sw_state=SW_PRE_RELEASED;
     c10:	fc 01       	movw	r30, r24
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	8e 0f       	add	r24, r30
     c18:	9f 1f       	adc	r25, r31
     c1a:	fc 01       	movw	r30, r24
     c1c:	e3 58       	subi	r30, 0x83	; 131
     c1e:	ff 4f       	sbci	r31, 0xFF	; 255
     c20:	72 83       	std	Z+2, r23	; 0x02
     c22:	13 c0       	rjmp	.+38     	; 0xc4a <Sw_Update+0x18c>
		}		
		break;
		
		case SW_PRE_RELEASED:
		
		if ( (SWs_Info[index].sw_samples[1]==SW_RELEASED_LEVEL) )
     c24:	fc 01       	movw	r30, r24
     c26:	ee 0f       	add	r30, r30
     c28:	ff 1f       	adc	r31, r31
     c2a:	e8 0f       	add	r30, r24
     c2c:	f9 1f       	adc	r31, r25
     c2e:	e3 58       	subi	r30, 0x83	; 131
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	21 81       	ldd	r18, Z+1	; 0x01
     c34:	21 30       	cpi	r18, 0x01	; 1
     c36:	49 f4       	brne	.+18     	; 0xc4a <Sw_Update+0x18c>
		{
					SWs_Info[index].sw_state=SW_RELEASED;
     c38:	fc 01       	movw	r30, r24
     c3a:	ee 0f       	add	r30, r30
     c3c:	ff 1f       	adc	r31, r31
     c3e:	8e 0f       	add	r24, r30
     c40:	9f 1f       	adc	r25, r31
     c42:	fc 01       	movw	r30, r24
     c44:	e3 58       	subi	r30, 0x83	; 131
     c46:	ff 4f       	sbci	r31, 0xFF	; 255
     c48:	12 82       	std	Z+2, r1	; 0x02
 return;	
}
Sw_Counter=1;


for (index=SW_PLUS;index<N_SWITCHES;index++)
     c4a:	33 30       	cpi	r19, 0x03	; 3
     c4c:	08 f4       	brcc	.+2      	; 0xc50 <Sw_Update+0x192>
     c4e:	47 cf       	rjmp	.-370    	; 0xade <Sw_Update+0x20>
     c50:	08 95       	ret
		break;
		
	}
	
	/************Update_States*****************/
	switch(SWs_Info[index].sw_state)
     c52:	fc 01       	movw	r30, r24
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	e8 0f       	add	r30, r24
     c5a:	f9 1f       	adc	r31, r25
     c5c:	e3 58       	subi	r30, 0x83	; 131
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	22 81       	ldd	r18, Z+2	; 0x02
     c62:	21 30       	cpi	r18, 0x01	; 1
     c64:	09 f4       	brne	.+2      	; 0xc68 <Sw_Update+0x1aa>
     c66:	ac cf       	rjmp	.-168    	; 0xbc0 <Sw_Update+0x102>
     c68:	08 f4       	brcc	.+2      	; 0xc6c <Sw_Update+0x1ae>
     c6a:	8c cf       	rjmp	.-232    	; 0xb84 <Sw_Update+0xc6>
     c6c:	22 30       	cpi	r18, 0x02	; 2
     c6e:	09 f4       	brne	.+2      	; 0xc72 <Sw_Update+0x1b4>
     c70:	bb cf       	rjmp	.-138    	; 0xbe8 <Sw_Update+0x12a>
     c72:	23 30       	cpi	r18, 0x03	; 3
     c74:	09 f0       	breq	.+2      	; 0xc78 <Sw_Update+0x1ba>
     c76:	33 cf       	rjmp	.-410    	; 0xade <Sw_Update+0x20>
     c78:	d5 cf       	rjmp	.-86     	; 0xc24 <Sw_Update+0x166>

00000c7a <Sw_Get_State>:

}

tSw_state Sw_Get_State(tSw sw)
{
   return SWs_Info[sw].sw_state;
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	fc 01       	movw	r30, r24
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	8e 0f       	add	r24, r30
     c84:	9f 1f       	adc	r25, r31
     c86:	fc 01       	movw	r30, r24
     c88:	e3 58       	subi	r30, 0x83	; 131
     c8a:	ff 4f       	sbci	r31, 0xFF	; 255
     c8c:	82 81       	ldd	r24, Z+2	; 0x02
     c8e:	08 95       	ret

00000c90 <Temperature_Init>:
#include <util/delay.h>
static uint8 AVG_Temp;

void Temperature_Init()
{
	ADC_Init(AVCC,CLK_ADC_DIV_64);
     c90:	66 e0       	ldi	r22, 0x06	; 6
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	0e 94 58 00 	call	0xb0	; 0xb0 <ADC_Init>
     c98:	2f ef       	ldi	r18, 0xFF	; 255
     c9a:	84 e3       	ldi	r24, 0x34	; 52
     c9c:	9c e0       	ldi	r25, 0x0C	; 12
     c9e:	21 50       	subi	r18, 0x01	; 1
     ca0:	80 40       	sbci	r24, 0x00	; 0
     ca2:	90 40       	sbci	r25, 0x00	; 0
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <Temperature_Init+0xe>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <Temperature_Init+0x18>
     ca8:	00 00       	nop
    _delay_ms(500);	
	ADC_Converstion(Conversion_on);
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	0e 94 8f 00 	call	0x11e	; 0x11e <ADC_Converstion>
     cb0:	08 95       	ret

00000cb2 <Temperature_Update>:
	static uint8 Temperature_Counter=1;
	static uint8 Measuring_Counter=0;
	static uint16 temp=0;
	
	uint16 temp1=0;
	Temperature_Counter+=OS_TICK; 
     cb2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Temperature_Counter.1998>
     cb6:	8f 5f       	subi	r24, 0xFF	; 255
	if (Temperature_Counter!=TEMPERATURE_MEASURE_PERIOD)
     cb8:	84 36       	cpi	r24, 0x64	; 100
     cba:	19 f0       	breq	.+6      	; 0xcc2 <Temperature_Update+0x10>
	static uint8 Temperature_Counter=1;
	static uint8 Measuring_Counter=0;
	static uint16 temp=0;
	
	uint16 temp1=0;
	Temperature_Counter+=OS_TICK; 
     cbc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Temperature_Counter.1998>
     cc0:	08 95       	ret
	if (Temperature_Counter!=TEMPERATURE_MEASURE_PERIOD)
	{
		
		return;
	}
	Temperature_Counter=1;
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Temperature_Counter.1998>
	if (Measuring_Counter<MAX_READINGS)
     cc8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Measuring_Counter.1999>
     ccc:	8a 30       	cpi	r24, 0x0A	; 10
     cce:	88 f5       	brcc	.+98     	; 0xd32 <Temperature_Update+0x80>
	{
			//ADC_ASY_Read
			temp1=Get_ADC_NO_BLOCK(LM35_Channel);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	0e 94 98 00 	call	0x130	; 0x130 <Get_ADC_NO_BLOCK>
			
			temp1=((uint32)temp1*5000)/1024;
     cd6:	bc 01       	movw	r22, r24
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 46 09 	call	0x128c	; 0x128c <__floatunsisf>
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e4       	ldi	r19, 0x40	; 64
     ce4:	4c e9       	ldi	r20, 0x9C	; 156
     ce6:	55 e4       	ldi	r21, 0x45	; 69
     ce8:	0e 94 ac 09 	call	0x1358	; 0x1358 <__mulsf3>
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 e8       	ldi	r20, 0x80	; 128
     cf2:	5a e3       	ldi	r21, 0x3A	; 58
     cf4:	0e 94 ac 09 	call	0x1358	; 0x1358 <__mulsf3>
     cf8:	0e 94 17 09 	call	0x122e	; 0x122e <__fixunssfsi>
			
			temp1=temp1/10;
			temp+=temp1;
     cfc:	9b 01       	movw	r18, r22
     cfe:	ad ec       	ldi	r26, 0xCD	; 205
     d00:	bc ec       	ldi	r27, 0xCC	; 204
     d02:	0e 94 47 0a 	call	0x148e	; 0x148e <__umulhisi3>
     d06:	96 95       	lsr	r25
     d08:	87 95       	ror	r24
     d0a:	96 95       	lsr	r25
     d0c:	87 95       	ror	r24
     d0e:	96 95       	lsr	r25
     d10:	87 95       	ror	r24
     d12:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <temp.2000>
     d16:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <temp.2000+0x1>
     d1a:	82 0f       	add	r24, r18
     d1c:	93 1f       	adc	r25, r19
     d1e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <temp.2000+0x1>
     d22:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <temp.2000>
			Measuring_Counter++;
     d26:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <Measuring_Counter.1999>
     d2a:	8f 5f       	subi	r24, 0xFF	; 255
     d2c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <Measuring_Counter.1999>
     d30:	16 c0       	rjmp	.+44     	; 0xd5e <Temperature_Update+0xac>
	}
	else
	{
		
		
		AVG_Temp=(uint16)(temp/10);
     d32:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <temp.2000>
     d36:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <temp.2000+0x1>
     d3a:	ad ec       	ldi	r26, 0xCD	; 205
     d3c:	bc ec       	ldi	r27, 0xCC	; 204
     d3e:	0e 94 47 0a 	call	0x148e	; 0x148e <__umulhisi3>
     d42:	96 95       	lsr	r25
     d44:	87 95       	ror	r24
     d46:	96 95       	lsr	r25
     d48:	87 95       	ror	r24
     d4a:	96 95       	lsr	r25
     d4c:	87 95       	ror	r24
     d4e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <AVG_Temp>
		//Reset_Everything
		Measuring_Counter=0;
     d52:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <Measuring_Counter.1999>
		temp=0;
     d56:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <temp.2000+0x1>
     d5a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <temp.2000>
	
	
	
	
	
    ADC_Converstion(Conversion_on);
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	0e 94 8f 00 	call	0x11e	; 0x11e <ADC_Converstion>
     d64:	08 95       	ret

00000d66 <Get_Temperature>:
	
}
uint8 Get_Temperature()
{
	return AVG_Temp;
     d66:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <AVG_Temp>
     d6a:	08 95       	ret

00000d6c <Temp_Setting_Init>:

#define USER_TEMP_SAVING_ADDERESS   (0x01)

void Temp_Setting_Init()
{
	User_Temp=60;
     d6c:	8c e3       	ldi	r24, 0x3C	; 60
     d6e:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <User_Temp>
     d72:	08 95       	ret

00000d74 <Temp_Setting_Update>:
void Temp_Setting_Update()
{
	static uint8 Temp_Setting_Counter=0;
    static uint16 Temp_Mode_Counter=0;

	Temp_Setting_Counter+=OS_TICK;
     d74:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <Temp_Setting_Counter.1750>
     d78:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (Temp_Setting_Counter!=TEMP_SETTING_PERIOD_MS)
     d7a:	84 31       	cpi	r24, 0x14	; 20
     d7c:	19 f0       	breq	.+6      	; 0xd84 <Temp_Setting_Update+0x10>
void Temp_Setting_Update()
{
	static uint8 Temp_Setting_Counter=0;
    static uint16 Temp_Mode_Counter=0;

	Temp_Setting_Counter+=OS_TICK;
     d7e:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <Temp_Setting_Counter.1750>
     d82:	08 95       	ret
	if (Temp_Setting_Counter!=TEMP_SETTING_PERIOD_MS)
	{
		
		return;
	}
	Temp_Setting_Counter=0;
     d84:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <Temp_Setting_Counter.1750>
	
	if (Sw_Get_State(SW_PLUS)==SW_PRE_PRESSED)
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0e 94 3d 06 	call	0xc7a	; 0xc7a <Sw_Get_State>
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	99 f4       	brne	.+38     	; 0xdb8 <Temp_Setting_Update+0x44>
	{
		if (User_Temp<75)
     d92:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <User_Temp>
     d96:	8b 34       	cpi	r24, 0x4B	; 75
     d98:	38 f4       	brcc	.+14     	; 0xda8 <Temp_Setting_Update+0x34>
		{
			User_Temp+=5;
     d9a:	8b 5f       	subi	r24, 0xFB	; 251
     d9c:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <User_Temp>
			External_EEPROM_Write(User_Temp,USER_TEMP_SAVING_ADDERESS);		
     da0:	61 e0       	ldi	r22, 0x01	; 1
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	0e 94 40 03 	call	0x680	; 0x680 <External_EEPROM_Write>
		}
		Temp_Setting_Flag=TRUE;
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Temp_Setting_Flag>
		
		Temp_Mode_Counter=0;
     dae:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <Temp_Mode_Counter.1751+0x1>
     db2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <Temp_Mode_Counter.1751>
     db6:	1c c0       	rjmp	.+56     	; 0xdf0 <Temp_Setting_Update+0x7c>
		
		
		
	}
	else if (Sw_Get_State(SW_MINUS)==SW_PRE_PRESSED)
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	0e 94 3d 06 	call	0xc7a	; 0xc7a <Sw_Get_State>
     dbe:	81 30       	cpi	r24, 0x01	; 1
     dc0:	99 f4       	brne	.+38     	; 0xde8 <Temp_Setting_Update+0x74>
	{
		if (User_Temp>30)
     dc2:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <User_Temp>
     dc6:	8f 31       	cpi	r24, 0x1F	; 31
     dc8:	38 f0       	brcs	.+14     	; 0xdd8 <Temp_Setting_Update+0x64>
		{
			User_Temp-=5;
     dca:	85 50       	subi	r24, 0x05	; 5
     dcc:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <User_Temp>
			External_EEPROM_Write(User_Temp,USER_TEMP_SAVING_ADDERESS);	
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	70 e0       	ldi	r23, 0x00	; 0
     dd4:	0e 94 40 03 	call	0x680	; 0x680 <External_EEPROM_Write>
		}
		Temp_Setting_Flag=TRUE;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <Temp_Setting_Flag>
		
		Temp_Mode_Counter=0;
     dde:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <Temp_Mode_Counter.1751+0x1>
     de2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <Temp_Mode_Counter.1751>
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <Temp_Setting_Update+0x7c>
	else
	{
		//Do nothing
	
	}
	if (Temp_Setting_Flag==TRUE)
     de8:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Temp_Setting_Flag>
     dec:	81 30       	cpi	r24, 0x01	; 1
     dee:	49 f4       	brne	.+18     	; 0xe02 <Temp_Setting_Update+0x8e>
	{
		Temp_Mode_Counter+=TEMP_SETTING_PERIOD_MS;
     df0:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Temp_Mode_Counter.1751>
     df4:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <Temp_Mode_Counter.1751+0x1>
     df8:	44 96       	adiw	r24, 0x14	; 20
     dfa:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <Temp_Mode_Counter.1751+0x1>
     dfe:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Temp_Mode_Counter.1751>
	}
	// Why can we just use 4999 ?????????????????
	
	if (Temp_Mode_Counter>4999)
     e02:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Temp_Mode_Counter.1751>
     e06:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <Temp_Mode_Counter.1751+0x1>
     e0a:	88 38       	cpi	r24, 0x88	; 136
     e0c:	93 41       	sbci	r25, 0x13	; 19
     e0e:	30 f0       	brcs	.+12     	; 0xe1c <Temp_Setting_Update+0xa8>
	{
		Temp_Setting_Flag=FALSE;
     e10:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <Temp_Setting_Flag>
		
		Temp_Mode_Counter=0;
     e14:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <Temp_Mode_Counter.1751+0x1>
     e18:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <Temp_Mode_Counter.1751>
     e1c:	08 95       	ret

00000e1e <Temp_Setting_Get_Temp>:
	
}
uint8 Temp_Setting_Get_Temp()
{
	return User_Temp;
}
     e1e:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <User_Temp>
     e22:	08 95       	ret

00000e24 <Temp_Setting_Get_Status>:

Bool_t Temp_Setting_Get_Status()
{
	return Temp_Setting_Flag;
}
     e24:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <Temp_Setting_Flag>
     e28:	08 95       	ret

00000e2a <Temp_Setting_Set_Temp>:
void Temp_Setting_Set_Temp(uint8 Saved_temp)
{
	User_Temp=Saved_temp;
     e2a:	80 93 8e 00 	sts	0x008E, r24	; 0x80008e <User_Temp>
     e2e:	08 95       	ret

00000e30 <__vector_11>:
}

void Timer1_Set_CTC_ICU_TOP(uint16 val)
{
	
	TIMER1_ICR1=val;
     e30:	1f 92       	push	r1
     e32:	0f 92       	push	r0
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	0f 92       	push	r0
     e38:	11 24       	eor	r1, r1
     e3a:	2f 93       	push	r18
     e3c:	3f 93       	push	r19
     e3e:	4f 93       	push	r20
     e40:	5f 93       	push	r21
     e42:	6f 93       	push	r22
     e44:	7f 93       	push	r23
     e46:	8f 93       	push	r24
     e48:	9f 93       	push	r25
     e4a:	af 93       	push	r26
     e4c:	bf 93       	push	r27
     e4e:	ef 93       	push	r30
     e50:	ff 93       	push	r31
     e52:	e0 91 99 00 	lds	r30, 0x0099	; 0x800099 <Timer0_ptr_Func>
     e56:	f0 91 9a 00 	lds	r31, 0x009A	; 0x80009a <Timer0_ptr_Func+0x1>
     e5a:	30 97       	sbiw	r30, 0x00	; 0
     e5c:	51 f0       	breq	.+20     	; 0xe72 <__vector_11+0x42>
     e5e:	09 95       	icall
     e60:	80 91 8f 00 	lds	r24, 0x008F	; 0x80008f <Timer_Counter>
     e64:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <Timer_Counter+0x1>
     e68:	01 96       	adiw	r24, 0x01	; 1
     e6a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <Timer_Counter+0x1>
     e6e:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <Timer_Counter>
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <__vector_10>:
     e94:	1f 92       	push	r1
     e96:	0f 92       	push	r0
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	0f 92       	push	r0
     e9c:	11 24       	eor	r1, r1
     e9e:	2f 93       	push	r18
     ea0:	3f 93       	push	r19
     ea2:	4f 93       	push	r20
     ea4:	5f 93       	push	r21
     ea6:	6f 93       	push	r22
     ea8:	7f 93       	push	r23
     eaa:	8f 93       	push	r24
     eac:	9f 93       	push	r25
     eae:	af 93       	push	r26
     eb0:	bf 93       	push	r27
     eb2:	ef 93       	push	r30
     eb4:	ff 93       	push	r31
     eb6:	e0 91 9b 00 	lds	r30, 0x009B	; 0x80009b <Timer0_ptr_Func+0x2>
     eba:	f0 91 9c 00 	lds	r31, 0x009C	; 0x80009c <Timer0_ptr_Func+0x3>
     ebe:	30 97       	sbiw	r30, 0x00	; 0
     ec0:	09 f0       	breq	.+2      	; 0xec4 <__vector_10+0x30>
     ec2:	09 95       	icall
     ec4:	ff 91       	pop	r31
     ec6:	ef 91       	pop	r30
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	7f 91       	pop	r23
     ed2:	6f 91       	pop	r22
     ed4:	5f 91       	pop	r21
     ed6:	4f 91       	pop	r20
     ed8:	3f 91       	pop	r19
     eda:	2f 91       	pop	r18
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0f 90       	pop	r0
     ee2:	1f 90       	pop	r1
     ee4:	18 95       	reti

00000ee6 <Timer1_Init>:
     ee6:	82 30       	cpi	r24, 0x02	; 2
     ee8:	29 f1       	breq	.+74     	; 0xf34 <Timer1_Init+0x4e>
     eea:	28 f4       	brcc	.+10     	; 0xef6 <Timer1_Init+0x10>
     eec:	88 23       	and	r24, r24
     eee:	41 f0       	breq	.+16     	; 0xf00 <Timer1_Init+0x1a>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	99 f0       	breq	.+38     	; 0xf1a <Timer1_Init+0x34>
     ef4:	45 c0       	rjmp	.+138    	; 0xf80 <Timer1_Init+0x9a>
     ef6:	83 30       	cpi	r24, 0x03	; 3
     ef8:	51 f1       	breq	.+84     	; 0xf4e <Timer1_Init+0x68>
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	a9 f1       	breq	.+106    	; 0xf68 <Timer1_Init+0x82>
     efe:	40 c0       	rjmp	.+128    	; 0xf80 <Timer1_Init+0x9a>
     f00:	8f b5       	in	r24, 0x2f	; 47
     f02:	8e 7f       	andi	r24, 0xFE	; 254
     f04:	8f bd       	out	0x2f, r24	; 47
     f06:	8f b5       	in	r24, 0x2f	; 47
     f08:	8d 7f       	andi	r24, 0xFD	; 253
     f0a:	8f bd       	out	0x2f, r24	; 47
     f0c:	8e b5       	in	r24, 0x2e	; 46
     f0e:	87 7f       	andi	r24, 0xF7	; 247
     f10:	8e bd       	out	0x2e, r24	; 46
     f12:	8e b5       	in	r24, 0x2e	; 46
     f14:	8f 7e       	andi	r24, 0xEF	; 239
     f16:	8e bd       	out	0x2e, r24	; 46
     f18:	33 c0       	rjmp	.+102    	; 0xf80 <Timer1_Init+0x9a>
     f1a:	8f b5       	in	r24, 0x2f	; 47
     f1c:	8e 7f       	andi	r24, 0xFE	; 254
     f1e:	8f bd       	out	0x2f, r24	; 47
     f20:	8f b5       	in	r24, 0x2f	; 47
     f22:	8d 7f       	andi	r24, 0xFD	; 253
     f24:	8f bd       	out	0x2f, r24	; 47
     f26:	8e b5       	in	r24, 0x2e	; 46
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	8e bd       	out	0x2e, r24	; 46
     f2c:	8e b5       	in	r24, 0x2e	; 46
     f2e:	80 61       	ori	r24, 0x10	; 16
     f30:	8e bd       	out	0x2e, r24	; 46
     f32:	26 c0       	rjmp	.+76     	; 0xf80 <Timer1_Init+0x9a>
     f34:	8f b5       	in	r24, 0x2f	; 47
     f36:	8e 7f       	andi	r24, 0xFE	; 254
     f38:	8f bd       	out	0x2f, r24	; 47
     f3a:	8f b5       	in	r24, 0x2f	; 47
     f3c:	8d 7f       	andi	r24, 0xFD	; 253
     f3e:	8f bd       	out	0x2f, r24	; 47
     f40:	8e b5       	in	r24, 0x2e	; 46
     f42:	88 60       	ori	r24, 0x08	; 8
     f44:	8e bd       	out	0x2e, r24	; 46
     f46:	8e b5       	in	r24, 0x2e	; 46
     f48:	8f 7e       	andi	r24, 0xEF	; 239
     f4a:	8e bd       	out	0x2e, r24	; 46
     f4c:	19 c0       	rjmp	.+50     	; 0xf80 <Timer1_Init+0x9a>
     f4e:	8f b5       	in	r24, 0x2f	; 47
     f50:	8e 7f       	andi	r24, 0xFE	; 254
     f52:	8f bd       	out	0x2f, r24	; 47
     f54:	8f b5       	in	r24, 0x2f	; 47
     f56:	82 60       	ori	r24, 0x02	; 2
     f58:	8f bd       	out	0x2f, r24	; 47
     f5a:	8e b5       	in	r24, 0x2e	; 46
     f5c:	88 60       	ori	r24, 0x08	; 8
     f5e:	8e bd       	out	0x2e, r24	; 46
     f60:	8e b5       	in	r24, 0x2e	; 46
     f62:	80 61       	ori	r24, 0x10	; 16
     f64:	8e bd       	out	0x2e, r24	; 46
     f66:	0c c0       	rjmp	.+24     	; 0xf80 <Timer1_Init+0x9a>
     f68:	8f b5       	in	r24, 0x2f	; 47
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	8f bd       	out	0x2f, r24	; 47
     f6e:	8f b5       	in	r24, 0x2f	; 47
     f70:	82 60       	ori	r24, 0x02	; 2
     f72:	8f bd       	out	0x2f, r24	; 47
     f74:	8e b5       	in	r24, 0x2e	; 46
     f76:	88 60       	ori	r24, 0x08	; 8
     f78:	8e bd       	out	0x2e, r24	; 46
     f7a:	8e b5       	in	r24, 0x2e	; 46
     f7c:	80 61       	ori	r24, 0x10	; 16
     f7e:	8e bd       	out	0x2e, r24	; 46
     f80:	21 30       	cpi	r18, 0x01	; 1
     f82:	69 f0       	breq	.+26     	; 0xf9e <Timer1_Init+0xb8>
     f84:	28 f0       	brcs	.+10     	; 0xf90 <Timer1_Init+0xaa>
     f86:	22 30       	cpi	r18, 0x02	; 2
     f88:	89 f0       	breq	.+34     	; 0xfac <Timer1_Init+0xc6>
     f8a:	23 30       	cpi	r18, 0x03	; 3
     f8c:	b1 f0       	breq	.+44     	; 0xfba <Timer1_Init+0xd4>
     f8e:	1b c0       	rjmp	.+54     	; 0xfc6 <Timer1_Init+0xe0>
     f90:	8f b5       	in	r24, 0x2f	; 47
     f92:	8f 7e       	andi	r24, 0xEF	; 239
     f94:	8f bd       	out	0x2f, r24	; 47
     f96:	8f b5       	in	r24, 0x2f	; 47
     f98:	8f 7d       	andi	r24, 0xDF	; 223
     f9a:	8f bd       	out	0x2f, r24	; 47
     f9c:	14 c0       	rjmp	.+40     	; 0xfc6 <Timer1_Init+0xe0>
     f9e:	8f b5       	in	r24, 0x2f	; 47
     fa0:	80 61       	ori	r24, 0x10	; 16
     fa2:	8f bd       	out	0x2f, r24	; 47
     fa4:	8f b5       	in	r24, 0x2f	; 47
     fa6:	8f 7d       	andi	r24, 0xDF	; 223
     fa8:	8f bd       	out	0x2f, r24	; 47
     faa:	0d c0       	rjmp	.+26     	; 0xfc6 <Timer1_Init+0xe0>
     fac:	8f b5       	in	r24, 0x2f	; 47
     fae:	8f 7e       	andi	r24, 0xEF	; 239
     fb0:	8f bd       	out	0x2f, r24	; 47
     fb2:	8f b5       	in	r24, 0x2f	; 47
     fb4:	80 62       	ori	r24, 0x20	; 32
     fb6:	8f bd       	out	0x2f, r24	; 47
     fb8:	06 c0       	rjmp	.+12     	; 0xfc6 <Timer1_Init+0xe0>
     fba:	8f b5       	in	r24, 0x2f	; 47
     fbc:	80 61       	ori	r24, 0x10	; 16
     fbe:	8f bd       	out	0x2f, r24	; 47
     fc0:	8f b5       	in	r24, 0x2f	; 47
     fc2:	80 62       	ori	r24, 0x20	; 32
     fc4:	8f bd       	out	0x2f, r24	; 47
     fc6:	41 30       	cpi	r20, 0x01	; 1
     fc8:	69 f0       	breq	.+26     	; 0xfe4 <Timer1_Init+0xfe>
     fca:	28 f0       	brcs	.+10     	; 0xfd6 <Timer1_Init+0xf0>
     fcc:	42 30       	cpi	r20, 0x02	; 2
     fce:	89 f0       	breq	.+34     	; 0xff2 <Timer1_Init+0x10c>
     fd0:	43 30       	cpi	r20, 0x03	; 3
     fd2:	b1 f0       	breq	.+44     	; 0x1000 <Timer1_Init+0x11a>
     fd4:	1b c0       	rjmp	.+54     	; 0x100c <Timer1_Init+0x126>
     fd6:	8f b5       	in	r24, 0x2f	; 47
     fd8:	8f 7b       	andi	r24, 0xBF	; 191
     fda:	8f bd       	out	0x2f, r24	; 47
     fdc:	8f b5       	in	r24, 0x2f	; 47
     fde:	8f 77       	andi	r24, 0x7F	; 127
     fe0:	8f bd       	out	0x2f, r24	; 47
     fe2:	14 c0       	rjmp	.+40     	; 0x100c <Timer1_Init+0x126>
     fe4:	8f b5       	in	r24, 0x2f	; 47
     fe6:	80 64       	ori	r24, 0x40	; 64
     fe8:	8f bd       	out	0x2f, r24	; 47
     fea:	8f b5       	in	r24, 0x2f	; 47
     fec:	8f 77       	andi	r24, 0x7F	; 127
     fee:	8f bd       	out	0x2f, r24	; 47
     ff0:	0d c0       	rjmp	.+26     	; 0x100c <Timer1_Init+0x126>
     ff2:	8f b5       	in	r24, 0x2f	; 47
     ff4:	8f 7b       	andi	r24, 0xBF	; 191
     ff6:	8f bd       	out	0x2f, r24	; 47
     ff8:	8f b5       	in	r24, 0x2f	; 47
     ffa:	80 68       	ori	r24, 0x80	; 128
     ffc:	8f bd       	out	0x2f, r24	; 47
     ffe:	06 c0       	rjmp	.+12     	; 0x100c <Timer1_Init+0x126>
    1000:	8f b5       	in	r24, 0x2f	; 47
    1002:	80 64       	ori	r24, 0x40	; 64
    1004:	8f bd       	out	0x2f, r24	; 47
    1006:	8f b5       	in	r24, 0x2f	; 47
    1008:	80 68       	ori	r24, 0x80	; 128
    100a:	8f bd       	out	0x2f, r24	; 47
    100c:	86 2f       	mov	r24, r22
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	88 30       	cpi	r24, 0x08	; 8
    1012:	91 05       	cpc	r25, r1
    1014:	08 f0       	brcs	.+2      	; 0x1018 <Timer1_Init+0x132>
    1016:	54 c0       	rjmp	.+168    	; 0x10c0 <Timer1_Init+0x1da>
    1018:	fc 01       	movw	r30, r24
    101a:	ef 5c       	subi	r30, 0xCF	; 207
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__tablejump2__>
    1022:	8e b5       	in	r24, 0x2e	; 46
    1024:	8e 7f       	andi	r24, 0xFE	; 254
    1026:	8e bd       	out	0x2e, r24	; 46
    1028:	8e b5       	in	r24, 0x2e	; 46
    102a:	8d 7f       	andi	r24, 0xFD	; 253
    102c:	8e bd       	out	0x2e, r24	; 46
    102e:	8e b5       	in	r24, 0x2e	; 46
    1030:	8b 7f       	andi	r24, 0xFB	; 251
    1032:	8e bd       	out	0x2e, r24	; 46
    1034:	08 95       	ret
    1036:	8e b5       	in	r24, 0x2e	; 46
    1038:	81 60       	ori	r24, 0x01	; 1
    103a:	8e bd       	out	0x2e, r24	; 46
    103c:	8e b5       	in	r24, 0x2e	; 46
    103e:	8d 7f       	andi	r24, 0xFD	; 253
    1040:	8e bd       	out	0x2e, r24	; 46
    1042:	8e b5       	in	r24, 0x2e	; 46
    1044:	8b 7f       	andi	r24, 0xFB	; 251
    1046:	8e bd       	out	0x2e, r24	; 46
    1048:	08 95       	ret
    104a:	8e b5       	in	r24, 0x2e	; 46
    104c:	8e 7f       	andi	r24, 0xFE	; 254
    104e:	8e bd       	out	0x2e, r24	; 46
    1050:	8e b5       	in	r24, 0x2e	; 46
    1052:	82 60       	ori	r24, 0x02	; 2
    1054:	8e bd       	out	0x2e, r24	; 46
    1056:	8e b5       	in	r24, 0x2e	; 46
    1058:	8b 7f       	andi	r24, 0xFB	; 251
    105a:	8e bd       	out	0x2e, r24	; 46
    105c:	08 95       	ret
    105e:	8e b5       	in	r24, 0x2e	; 46
    1060:	81 60       	ori	r24, 0x01	; 1
    1062:	8e bd       	out	0x2e, r24	; 46
    1064:	8e b5       	in	r24, 0x2e	; 46
    1066:	82 60       	ori	r24, 0x02	; 2
    1068:	8e bd       	out	0x2e, r24	; 46
    106a:	8e b5       	in	r24, 0x2e	; 46
    106c:	8b 7f       	andi	r24, 0xFB	; 251
    106e:	8e bd       	out	0x2e, r24	; 46
    1070:	08 95       	ret
    1072:	8e b5       	in	r24, 0x2e	; 46
    1074:	8e 7f       	andi	r24, 0xFE	; 254
    1076:	8e bd       	out	0x2e, r24	; 46
    1078:	8e b5       	in	r24, 0x2e	; 46
    107a:	8d 7f       	andi	r24, 0xFD	; 253
    107c:	8e bd       	out	0x2e, r24	; 46
    107e:	8e b5       	in	r24, 0x2e	; 46
    1080:	84 60       	ori	r24, 0x04	; 4
    1082:	8e bd       	out	0x2e, r24	; 46
    1084:	08 95       	ret
    1086:	8e b5       	in	r24, 0x2e	; 46
    1088:	81 60       	ori	r24, 0x01	; 1
    108a:	8e bd       	out	0x2e, r24	; 46
    108c:	8e b5       	in	r24, 0x2e	; 46
    108e:	8d 7f       	andi	r24, 0xFD	; 253
    1090:	8e bd       	out	0x2e, r24	; 46
    1092:	8e b5       	in	r24, 0x2e	; 46
    1094:	84 60       	ori	r24, 0x04	; 4
    1096:	8e bd       	out	0x2e, r24	; 46
    1098:	08 95       	ret
    109a:	8e b5       	in	r24, 0x2e	; 46
    109c:	8e 7f       	andi	r24, 0xFE	; 254
    109e:	8e bd       	out	0x2e, r24	; 46
    10a0:	8e b5       	in	r24, 0x2e	; 46
    10a2:	82 60       	ori	r24, 0x02	; 2
    10a4:	8e bd       	out	0x2e, r24	; 46
    10a6:	8e b5       	in	r24, 0x2e	; 46
    10a8:	84 60       	ori	r24, 0x04	; 4
    10aa:	8e bd       	out	0x2e, r24	; 46
    10ac:	08 95       	ret
    10ae:	8e b5       	in	r24, 0x2e	; 46
    10b0:	81 60       	ori	r24, 0x01	; 1
    10b2:	8e bd       	out	0x2e, r24	; 46
    10b4:	8e b5       	in	r24, 0x2e	; 46
    10b6:	82 60       	ori	r24, 0x02	; 2
    10b8:	8e bd       	out	0x2e, r24	; 46
    10ba:	8e b5       	in	r24, 0x2e	; 46
    10bc:	84 60       	ori	r24, 0x04	; 4
    10be:	8e bd       	out	0x2e, r24	; 46
    10c0:	08 95       	ret

000010c2 <Timer1_CTC_OCR1A_Interrupt_State>:
    10c2:	88 23       	and	r24, r24
    10c4:	19 f0       	breq	.+6      	; 0x10cc <Timer1_CTC_OCR1A_Interrupt_State+0xa>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	29 f0       	breq	.+10     	; 0x10d4 <Timer1_CTC_OCR1A_Interrupt_State+0x12>
    10ca:	08 95       	ret
    10cc:	89 b7       	in	r24, 0x39	; 57
    10ce:	80 61       	ori	r24, 0x10	; 16
    10d0:	89 bf       	out	0x39, r24	; 57
    10d2:	08 95       	ret
    10d4:	89 b7       	in	r24, 0x39	; 57
    10d6:	8f 7e       	andi	r24, 0xEF	; 239
    10d8:	89 bf       	out	0x39, r24	; 57
    10da:	08 95       	ret

000010dc <Timer1_CTC_OC1RA_Set_Call_Back>:
    10dc:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <Timer1_ptr_Func+0x3>
    10e0:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <Timer1_ptr_Func+0x2>
    10e4:	08 95       	ret

000010e6 <__vector_9>:
}

ISR(TIMER1_OVF_vect)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
	if(Timer1_ptr_Func[0]!=NULL_PTR)
    1108:	e0 91 91 00 	lds	r30, 0x0091	; 0x800091 <Timer1_ptr_Func>
    110c:	f0 91 92 00 	lds	r31, 0x0092	; 0x800092 <Timer1_ptr_Func+0x1>
    1110:	30 97       	sbiw	r30, 0x00	; 0
    1112:	09 f0       	breq	.+2      	; 0x1116 <__vector_9+0x30>
	{
		Timer1_ptr_Func[0]();
    1114:	09 95       	icall
	}


}
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	0f 90       	pop	r0
    1134:	1f 90       	pop	r1
    1136:	18 95       	reti

00001138 <__vector_7>:


ISR(TIMER1_OCA_vect)
{
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
	if(Timer1_ptr_Func[1]!=NULL_PTR)
    115a:	e0 91 93 00 	lds	r30, 0x0093	; 0x800093 <Timer1_ptr_Func+0x2>
    115e:	f0 91 94 00 	lds	r31, 0x0094	; 0x800094 <Timer1_ptr_Func+0x3>
    1162:	30 97       	sbiw	r30, 0x00	; 0
    1164:	09 f0       	breq	.+2      	; 0x1168 <__vector_7+0x30>
	{
		Timer1_ptr_Func[1]();
    1166:	09 95       	icall
	}


}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	7f 91       	pop	r23
    1176:	6f 91       	pop	r22
    1178:	5f 91       	pop	r21
    117a:	4f 91       	pop	r20
    117c:	3f 91       	pop	r19
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <__vector_8>:



ISR(TIMER1_OCB_vect)
{
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	if(Timer1_ptr_Func[2]!=NULL_PTR)
    11ac:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <Timer1_ptr_Func+0x4>
    11b0:	f0 91 96 00 	lds	r31, 0x0096	; 0x800096 <Timer1_ptr_Func+0x5>
    11b4:	30 97       	sbiw	r30, 0x00	; 0
    11b6:	09 f0       	breq	.+2      	; 0x11ba <__vector_8+0x30>
	{
		Timer1_ptr_Func[2]();
    11b8:	09 95       	icall
	}


}
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	7f 91       	pop	r23
    11c8:	6f 91       	pop	r22
    11ca:	5f 91       	pop	r21
    11cc:	4f 91       	pop	r20
    11ce:	3f 91       	pop	r19
    11d0:	2f 91       	pop	r18
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <__vector_6>:

ISR(TIMER1_ICU_vect)
{
    11dc:	1f 92       	push	r1
    11de:	0f 92       	push	r0
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	0f 92       	push	r0
    11e4:	11 24       	eor	r1, r1
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
	if(Timer1_ptr_Func[3]!=NULL_PTR)
    11fe:	e0 91 97 00 	lds	r30, 0x0097	; 0x800097 <Timer1_ptr_Func+0x6>
    1202:	f0 91 98 00 	lds	r31, 0x0098	; 0x800098 <Timer1_ptr_Func+0x7>
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	09 f0       	breq	.+2      	; 0x120c <__vector_6+0x30>
	{
		Timer1_ptr_Func[3]();
    120a:	09 95       	icall
	}
}
    120c:	ff 91       	pop	r31
    120e:	ef 91       	pop	r30
    1210:	bf 91       	pop	r27
    1212:	af 91       	pop	r26
    1214:	9f 91       	pop	r25
    1216:	8f 91       	pop	r24
    1218:	7f 91       	pop	r23
    121a:	6f 91       	pop	r22
    121c:	5f 91       	pop	r21
    121e:	4f 91       	pop	r20
    1220:	3f 91       	pop	r19
    1222:	2f 91       	pop	r18
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__fixunssfsi>:
    122e:	0e 94 8b 09 	call	0x1316	; 0x1316 <__fp_splitA>
    1232:	88 f0       	brcs	.+34     	; 0x1256 <__fixunssfsi+0x28>
    1234:	9f 57       	subi	r25, 0x7F	; 127
    1236:	98 f0       	brcs	.+38     	; 0x125e <__fixunssfsi+0x30>
    1238:	b9 2f       	mov	r27, r25
    123a:	99 27       	eor	r25, r25
    123c:	b7 51       	subi	r27, 0x17	; 23
    123e:	b0 f0       	brcs	.+44     	; 0x126c <__fixunssfsi+0x3e>
    1240:	e1 f0       	breq	.+56     	; 0x127a <__fixunssfsi+0x4c>
    1242:	66 0f       	add	r22, r22
    1244:	77 1f       	adc	r23, r23
    1246:	88 1f       	adc	r24, r24
    1248:	99 1f       	adc	r25, r25
    124a:	1a f0       	brmi	.+6      	; 0x1252 <__fixunssfsi+0x24>
    124c:	ba 95       	dec	r27
    124e:	c9 f7       	brne	.-14     	; 0x1242 <__fixunssfsi+0x14>
    1250:	14 c0       	rjmp	.+40     	; 0x127a <__fixunssfsi+0x4c>
    1252:	b1 30       	cpi	r27, 0x01	; 1
    1254:	91 f0       	breq	.+36     	; 0x127a <__fixunssfsi+0x4c>
    1256:	0e 94 a5 09 	call	0x134a	; 0x134a <__fp_zero>
    125a:	b1 e0       	ldi	r27, 0x01	; 1
    125c:	08 95       	ret
    125e:	0c 94 a5 09 	jmp	0x134a	; 0x134a <__fp_zero>
    1262:	67 2f       	mov	r22, r23
    1264:	78 2f       	mov	r23, r24
    1266:	88 27       	eor	r24, r24
    1268:	b8 5f       	subi	r27, 0xF8	; 248
    126a:	39 f0       	breq	.+14     	; 0x127a <__fixunssfsi+0x4c>
    126c:	b9 3f       	cpi	r27, 0xF9	; 249
    126e:	cc f3       	brlt	.-14     	; 0x1262 <__fixunssfsi+0x34>
    1270:	86 95       	lsr	r24
    1272:	77 95       	ror	r23
    1274:	67 95       	ror	r22
    1276:	b3 95       	inc	r27
    1278:	d9 f7       	brne	.-10     	; 0x1270 <__fixunssfsi+0x42>
    127a:	3e f4       	brtc	.+14     	; 0x128a <__fixunssfsi+0x5c>
    127c:	90 95       	com	r25
    127e:	80 95       	com	r24
    1280:	70 95       	com	r23
    1282:	61 95       	neg	r22
    1284:	7f 4f       	sbci	r23, 0xFF	; 255
    1286:	8f 4f       	sbci	r24, 0xFF	; 255
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	08 95       	ret

0000128c <__floatunsisf>:
    128c:	e8 94       	clt
    128e:	09 c0       	rjmp	.+18     	; 0x12a2 <__floatsisf+0x12>

00001290 <__floatsisf>:
    1290:	97 fb       	bst	r25, 7
    1292:	3e f4       	brtc	.+14     	; 0x12a2 <__floatsisf+0x12>
    1294:	90 95       	com	r25
    1296:	80 95       	com	r24
    1298:	70 95       	com	r23
    129a:	61 95       	neg	r22
    129c:	7f 4f       	sbci	r23, 0xFF	; 255
    129e:	8f 4f       	sbci	r24, 0xFF	; 255
    12a0:	9f 4f       	sbci	r25, 0xFF	; 255
    12a2:	99 23       	and	r25, r25
    12a4:	a9 f0       	breq	.+42     	; 0x12d0 <__floatsisf+0x40>
    12a6:	f9 2f       	mov	r31, r25
    12a8:	96 e9       	ldi	r25, 0x96	; 150
    12aa:	bb 27       	eor	r27, r27
    12ac:	93 95       	inc	r25
    12ae:	f6 95       	lsr	r31
    12b0:	87 95       	ror	r24
    12b2:	77 95       	ror	r23
    12b4:	67 95       	ror	r22
    12b6:	b7 95       	ror	r27
    12b8:	f1 11       	cpse	r31, r1
    12ba:	f8 cf       	rjmp	.-16     	; 0x12ac <__floatsisf+0x1c>
    12bc:	fa f4       	brpl	.+62     	; 0x12fc <__floatsisf+0x6c>
    12be:	bb 0f       	add	r27, r27
    12c0:	11 f4       	brne	.+4      	; 0x12c6 <__floatsisf+0x36>
    12c2:	60 ff       	sbrs	r22, 0
    12c4:	1b c0       	rjmp	.+54     	; 0x12fc <__floatsisf+0x6c>
    12c6:	6f 5f       	subi	r22, 0xFF	; 255
    12c8:	7f 4f       	sbci	r23, 0xFF	; 255
    12ca:	8f 4f       	sbci	r24, 0xFF	; 255
    12cc:	9f 4f       	sbci	r25, 0xFF	; 255
    12ce:	16 c0       	rjmp	.+44     	; 0x12fc <__floatsisf+0x6c>
    12d0:	88 23       	and	r24, r24
    12d2:	11 f0       	breq	.+4      	; 0x12d8 <__floatsisf+0x48>
    12d4:	96 e9       	ldi	r25, 0x96	; 150
    12d6:	11 c0       	rjmp	.+34     	; 0x12fa <__floatsisf+0x6a>
    12d8:	77 23       	and	r23, r23
    12da:	21 f0       	breq	.+8      	; 0x12e4 <__floatsisf+0x54>
    12dc:	9e e8       	ldi	r25, 0x8E	; 142
    12de:	87 2f       	mov	r24, r23
    12e0:	76 2f       	mov	r23, r22
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <__floatsisf+0x5e>
    12e4:	66 23       	and	r22, r22
    12e6:	71 f0       	breq	.+28     	; 0x1304 <__floatsisf+0x74>
    12e8:	96 e8       	ldi	r25, 0x86	; 134
    12ea:	86 2f       	mov	r24, r22
    12ec:	70 e0       	ldi	r23, 0x00	; 0
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	2a f0       	brmi	.+10     	; 0x12fc <__floatsisf+0x6c>
    12f2:	9a 95       	dec	r25
    12f4:	66 0f       	add	r22, r22
    12f6:	77 1f       	adc	r23, r23
    12f8:	88 1f       	adc	r24, r24
    12fa:	da f7       	brpl	.-10     	; 0x12f2 <__floatsisf+0x62>
    12fc:	88 0f       	add	r24, r24
    12fe:	96 95       	lsr	r25
    1300:	87 95       	ror	r24
    1302:	97 f9       	bld	r25, 7
    1304:	08 95       	ret

00001306 <__fp_split3>:
    1306:	57 fd       	sbrc	r21, 7
    1308:	90 58       	subi	r25, 0x80	; 128
    130a:	44 0f       	add	r20, r20
    130c:	55 1f       	adc	r21, r21
    130e:	59 f0       	breq	.+22     	; 0x1326 <__fp_splitA+0x10>
    1310:	5f 3f       	cpi	r21, 0xFF	; 255
    1312:	71 f0       	breq	.+28     	; 0x1330 <__fp_splitA+0x1a>
    1314:	47 95       	ror	r20

00001316 <__fp_splitA>:
    1316:	88 0f       	add	r24, r24
    1318:	97 fb       	bst	r25, 7
    131a:	99 1f       	adc	r25, r25
    131c:	61 f0       	breq	.+24     	; 0x1336 <__fp_splitA+0x20>
    131e:	9f 3f       	cpi	r25, 0xFF	; 255
    1320:	79 f0       	breq	.+30     	; 0x1340 <__fp_splitA+0x2a>
    1322:	87 95       	ror	r24
    1324:	08 95       	ret
    1326:	12 16       	cp	r1, r18
    1328:	13 06       	cpc	r1, r19
    132a:	14 06       	cpc	r1, r20
    132c:	55 1f       	adc	r21, r21
    132e:	f2 cf       	rjmp	.-28     	; 0x1314 <__fp_split3+0xe>
    1330:	46 95       	lsr	r20
    1332:	f1 df       	rcall	.-30     	; 0x1316 <__fp_splitA>
    1334:	08 c0       	rjmp	.+16     	; 0x1346 <__fp_splitA+0x30>
    1336:	16 16       	cp	r1, r22
    1338:	17 06       	cpc	r1, r23
    133a:	18 06       	cpc	r1, r24
    133c:	99 1f       	adc	r25, r25
    133e:	f1 cf       	rjmp	.-30     	; 0x1322 <__fp_splitA+0xc>
    1340:	86 95       	lsr	r24
    1342:	71 05       	cpc	r23, r1
    1344:	61 05       	cpc	r22, r1
    1346:	08 94       	sec
    1348:	08 95       	ret

0000134a <__fp_zero>:
    134a:	e8 94       	clt

0000134c <__fp_szero>:
    134c:	bb 27       	eor	r27, r27
    134e:	66 27       	eor	r22, r22
    1350:	77 27       	eor	r23, r23
    1352:	cb 01       	movw	r24, r22
    1354:	97 f9       	bld	r25, 7
    1356:	08 95       	ret

00001358 <__mulsf3>:
    1358:	0e 94 bf 09 	call	0x137e	; 0x137e <__mulsf3x>
    135c:	0c 94 30 0a 	jmp	0x1460	; 0x1460 <__fp_round>
    1360:	0e 94 22 0a 	call	0x1444	; 0x1444 <__fp_pscA>
    1364:	38 f0       	brcs	.+14     	; 0x1374 <__mulsf3+0x1c>
    1366:	0e 94 29 0a 	call	0x1452	; 0x1452 <__fp_pscB>
    136a:	20 f0       	brcs	.+8      	; 0x1374 <__mulsf3+0x1c>
    136c:	95 23       	and	r25, r21
    136e:	11 f0       	breq	.+4      	; 0x1374 <__mulsf3+0x1c>
    1370:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__fp_inf>
    1374:	0c 94 1f 0a 	jmp	0x143e	; 0x143e <__fp_nan>
    1378:	11 24       	eor	r1, r1
    137a:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_szero>

0000137e <__mulsf3x>:
    137e:	0e 94 83 09 	call	0x1306	; 0x1306 <__fp_split3>
    1382:	70 f3       	brcs	.-36     	; 0x1360 <__mulsf3+0x8>

00001384 <__mulsf3_pse>:
    1384:	95 9f       	mul	r25, r21
    1386:	c1 f3       	breq	.-16     	; 0x1378 <__mulsf3+0x20>
    1388:	95 0f       	add	r25, r21
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	55 1f       	adc	r21, r21
    138e:	62 9f       	mul	r22, r18
    1390:	f0 01       	movw	r30, r0
    1392:	72 9f       	mul	r23, r18
    1394:	bb 27       	eor	r27, r27
    1396:	f0 0d       	add	r31, r0
    1398:	b1 1d       	adc	r27, r1
    139a:	63 9f       	mul	r22, r19
    139c:	aa 27       	eor	r26, r26
    139e:	f0 0d       	add	r31, r0
    13a0:	b1 1d       	adc	r27, r1
    13a2:	aa 1f       	adc	r26, r26
    13a4:	64 9f       	mul	r22, r20
    13a6:	66 27       	eor	r22, r22
    13a8:	b0 0d       	add	r27, r0
    13aa:	a1 1d       	adc	r26, r1
    13ac:	66 1f       	adc	r22, r22
    13ae:	82 9f       	mul	r24, r18
    13b0:	22 27       	eor	r18, r18
    13b2:	b0 0d       	add	r27, r0
    13b4:	a1 1d       	adc	r26, r1
    13b6:	62 1f       	adc	r22, r18
    13b8:	73 9f       	mul	r23, r19
    13ba:	b0 0d       	add	r27, r0
    13bc:	a1 1d       	adc	r26, r1
    13be:	62 1f       	adc	r22, r18
    13c0:	83 9f       	mul	r24, r19
    13c2:	a0 0d       	add	r26, r0
    13c4:	61 1d       	adc	r22, r1
    13c6:	22 1f       	adc	r18, r18
    13c8:	74 9f       	mul	r23, r20
    13ca:	33 27       	eor	r19, r19
    13cc:	a0 0d       	add	r26, r0
    13ce:	61 1d       	adc	r22, r1
    13d0:	23 1f       	adc	r18, r19
    13d2:	84 9f       	mul	r24, r20
    13d4:	60 0d       	add	r22, r0
    13d6:	21 1d       	adc	r18, r1
    13d8:	82 2f       	mov	r24, r18
    13da:	76 2f       	mov	r23, r22
    13dc:	6a 2f       	mov	r22, r26
    13de:	11 24       	eor	r1, r1
    13e0:	9f 57       	subi	r25, 0x7F	; 127
    13e2:	50 40       	sbci	r21, 0x00	; 0
    13e4:	9a f0       	brmi	.+38     	; 0x140c <__mulsf3_pse+0x88>
    13e6:	f1 f0       	breq	.+60     	; 0x1424 <__mulsf3_pse+0xa0>
    13e8:	88 23       	and	r24, r24
    13ea:	4a f0       	brmi	.+18     	; 0x13fe <__mulsf3_pse+0x7a>
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	bb 1f       	adc	r27, r27
    13f2:	66 1f       	adc	r22, r22
    13f4:	77 1f       	adc	r23, r23
    13f6:	88 1f       	adc	r24, r24
    13f8:	91 50       	subi	r25, 0x01	; 1
    13fa:	50 40       	sbci	r21, 0x00	; 0
    13fc:	a9 f7       	brne	.-22     	; 0x13e8 <__mulsf3_pse+0x64>
    13fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1400:	51 05       	cpc	r21, r1
    1402:	80 f0       	brcs	.+32     	; 0x1424 <__mulsf3_pse+0xa0>
    1404:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__fp_inf>
    1408:	0c 94 a6 09 	jmp	0x134c	; 0x134c <__fp_szero>
    140c:	5f 3f       	cpi	r21, 0xFF	; 255
    140e:	e4 f3       	brlt	.-8      	; 0x1408 <__mulsf3_pse+0x84>
    1410:	98 3e       	cpi	r25, 0xE8	; 232
    1412:	d4 f3       	brlt	.-12     	; 0x1408 <__mulsf3_pse+0x84>
    1414:	86 95       	lsr	r24
    1416:	77 95       	ror	r23
    1418:	67 95       	ror	r22
    141a:	b7 95       	ror	r27
    141c:	f7 95       	ror	r31
    141e:	e7 95       	ror	r30
    1420:	9f 5f       	subi	r25, 0xFF	; 255
    1422:	c1 f7       	brne	.-16     	; 0x1414 <__mulsf3_pse+0x90>
    1424:	fe 2b       	or	r31, r30
    1426:	88 0f       	add	r24, r24
    1428:	91 1d       	adc	r25, r1
    142a:	96 95       	lsr	r25
    142c:	87 95       	ror	r24
    142e:	97 f9       	bld	r25, 7
    1430:	08 95       	ret

00001432 <__fp_inf>:
    1432:	97 f9       	bld	r25, 7
    1434:	9f 67       	ori	r25, 0x7F	; 127
    1436:	80 e8       	ldi	r24, 0x80	; 128
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	08 95       	ret

0000143e <__fp_nan>:
    143e:	9f ef       	ldi	r25, 0xFF	; 255
    1440:	80 ec       	ldi	r24, 0xC0	; 192
    1442:	08 95       	ret

00001444 <__fp_pscA>:
    1444:	00 24       	eor	r0, r0
    1446:	0a 94       	dec	r0
    1448:	16 16       	cp	r1, r22
    144a:	17 06       	cpc	r1, r23
    144c:	18 06       	cpc	r1, r24
    144e:	09 06       	cpc	r0, r25
    1450:	08 95       	ret

00001452 <__fp_pscB>:
    1452:	00 24       	eor	r0, r0
    1454:	0a 94       	dec	r0
    1456:	12 16       	cp	r1, r18
    1458:	13 06       	cpc	r1, r19
    145a:	14 06       	cpc	r1, r20
    145c:	05 06       	cpc	r0, r21
    145e:	08 95       	ret

00001460 <__fp_round>:
    1460:	09 2e       	mov	r0, r25
    1462:	03 94       	inc	r0
    1464:	00 0c       	add	r0, r0
    1466:	11 f4       	brne	.+4      	; 0x146c <__fp_round+0xc>
    1468:	88 23       	and	r24, r24
    146a:	52 f0       	brmi	.+20     	; 0x1480 <__fp_round+0x20>
    146c:	bb 0f       	add	r27, r27
    146e:	40 f4       	brcc	.+16     	; 0x1480 <__fp_round+0x20>
    1470:	bf 2b       	or	r27, r31
    1472:	11 f4       	brne	.+4      	; 0x1478 <__fp_round+0x18>
    1474:	60 ff       	sbrs	r22, 0
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <__fp_round+0x20>
    1478:	6f 5f       	subi	r22, 0xFF	; 255
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	8f 4f       	sbci	r24, 0xFF	; 255
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	08 95       	ret

00001482 <__tablejump2__>:
    1482:	ee 0f       	add	r30, r30
    1484:	ff 1f       	adc	r31, r31
    1486:	05 90       	lpm	r0, Z+
    1488:	f4 91       	lpm	r31, Z
    148a:	e0 2d       	mov	r30, r0
    148c:	09 94       	ijmp

0000148e <__umulhisi3>:
    148e:	a2 9f       	mul	r26, r18
    1490:	b0 01       	movw	r22, r0
    1492:	b3 9f       	mul	r27, r19
    1494:	c0 01       	movw	r24, r0
    1496:	a3 9f       	mul	r26, r19
    1498:	70 0d       	add	r23, r0
    149a:	81 1d       	adc	r24, r1
    149c:	11 24       	eor	r1, r1
    149e:	91 1d       	adc	r25, r1
    14a0:	b2 9f       	mul	r27, r18
    14a2:	70 0d       	add	r23, r0
    14a4:	81 1d       	adc	r24, r1
    14a6:	11 24       	eor	r1, r1
    14a8:	91 1d       	adc	r25, r1
    14aa:	08 95       	ret

000014ac <_exit>:
    14ac:	f8 94       	cli

000014ae <__stop_program>:
    14ae:	ff cf       	rjmp	.-2      	; 0x14ae <__stop_program>
